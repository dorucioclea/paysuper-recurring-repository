// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: repository/repository.proto

/*
Package repository is a generated protocol buffer package.

It is generated from these files:
	repository/repository.proto

It has these top-level messages:
	Result
	ConvertRequest
	ConvertResponse
	FindByUnderscoreId
	FindByStringValue
	FloatValue
	FindByIntValue
	FindByGroupCurrencyRequest
	FindByProjectOrderId
	Projects
	PaymentMethods
	CommissionRequest
	CommissionResponse
	CalculateVatRequest
	AddSavedCardRequest
*/
package repository

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import billing "github.com/ProtocolONE/payone-repository/pkg/proto/billing"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = billing.SavedCard{}

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Repository service

type RepositoryService interface {
	InsertOrder(ctx context.Context, in *billing.Order, opts ...client.CallOption) (*Result, error)
	UpdateOrder(ctx context.Context, in *billing.Order, opts ...client.CallOption) (*Result, error)
	FindOrderById(ctx context.Context, in *FindByUnderscoreId, opts ...client.CallOption) (*billing.Order, error)
	ConvertAmount(ctx context.Context, in *ConvertRequest, opts ...client.CallOption) (*ConvertResponse, error)
	GetConvertRate(ctx context.Context, in *ConvertRequest, opts ...client.CallOption) (*ConvertResponse, error)
	UpdateMerchant(ctx context.Context, in *billing.Merchant, opts ...client.CallOption) (*Result, error)
	FindMerchantById(ctx context.Context, in *FindByStringValue, opts ...client.CallOption) (*billing.Merchant, error)
	FindProjectById(ctx context.Context, in *FindByUnderscoreId, opts ...client.CallOption) (*billing.Project, error)
	InsertProject(ctx context.Context, in *billing.Project, opts ...client.CallOption) (*Result, error)
	UpdateProject(ctx context.Context, in *billing.Project, opts ...client.CallOption) (*Result, error)
	DeleteProject(ctx context.Context, in *FindByUnderscoreId, opts ...client.CallOption) (*Result, error)
	ConvertProjectToProjectOrder(ctx context.Context, in *billing.Project, opts ...client.CallOption) (*billing.ProjectOrder, error)
	FindPaymentMethodByGroupAndCurrency(ctx context.Context, in *FindByGroupCurrencyRequest, opts ...client.CallOption) (*billing.PaymentMethod, error)
	FindPaymentMethodsByCurrency(ctx context.Context, in *FindByIntValue, opts ...client.CallOption) (*PaymentMethods, error)
	FindCurrencyByCodeA3(ctx context.Context, in *FindByStringValue, opts ...client.CallOption) (*billing.Currency, error)
	FindCurrencyByCodeInt(ctx context.Context, in *FindByIntValue, opts ...client.CallOption) (*billing.Currency, error)
	FindOrderByProjectAndOrderId(ctx context.Context, in *FindByProjectOrderId, opts ...client.CallOption) (*billing.Order, error)
	CalculateCommission(ctx context.Context, in *CommissionRequest, opts ...client.CallOption) (*CommissionResponse, error)
	CalculateVat(ctx context.Context, in *CalculateVatRequest, opts ...client.CallOption) (*FloatValue, error)
	FindBinData(ctx context.Context, in *FindByStringValue, opts ...client.CallOption) (*billing.BinData, error)
	AddSavedCard(ctx context.Context, in *AddSavedCardRequest, opts ...client.CallOption) (*Result, error)
	DeleteSavedCard(ctx context.Context, in *billing.SavedCardMasked, opts ...client.CallOption) (*Result, error)
	FindSavedCardsByAccount(ctx context.Context, in *FindByStringValue, opts ...client.CallOption) (*billing.SavedCard, error)
}

type repositoryService struct {
	c    client.Client
	name string
}

func NewRepositoryService(name string, c client.Client) RepositoryService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "repository"
	}
	return &repositoryService{
		c:    c,
		name: name,
	}
}

func (c *repositoryService) InsertOrder(ctx context.Context, in *billing.Order, opts ...client.CallOption) (*Result, error) {
	req := c.c.NewRequest(c.name, "Repository.InsertOrder", in)
	out := new(Result)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryService) UpdateOrder(ctx context.Context, in *billing.Order, opts ...client.CallOption) (*Result, error) {
	req := c.c.NewRequest(c.name, "Repository.UpdateOrder", in)
	out := new(Result)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryService) FindOrderById(ctx context.Context, in *FindByUnderscoreId, opts ...client.CallOption) (*billing.Order, error) {
	req := c.c.NewRequest(c.name, "Repository.FindOrderById", in)
	out := new(billing.Order)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryService) ConvertAmount(ctx context.Context, in *ConvertRequest, opts ...client.CallOption) (*ConvertResponse, error) {
	req := c.c.NewRequest(c.name, "Repository.ConvertAmount", in)
	out := new(ConvertResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryService) GetConvertRate(ctx context.Context, in *ConvertRequest, opts ...client.CallOption) (*ConvertResponse, error) {
	req := c.c.NewRequest(c.name, "Repository.GetConvertRate", in)
	out := new(ConvertResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryService) UpdateMerchant(ctx context.Context, in *billing.Merchant, opts ...client.CallOption) (*Result, error) {
	req := c.c.NewRequest(c.name, "Repository.UpdateMerchant", in)
	out := new(Result)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryService) FindMerchantById(ctx context.Context, in *FindByStringValue, opts ...client.CallOption) (*billing.Merchant, error) {
	req := c.c.NewRequest(c.name, "Repository.FindMerchantById", in)
	out := new(billing.Merchant)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryService) FindProjectById(ctx context.Context, in *FindByUnderscoreId, opts ...client.CallOption) (*billing.Project, error) {
	req := c.c.NewRequest(c.name, "Repository.FindProjectById", in)
	out := new(billing.Project)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryService) InsertProject(ctx context.Context, in *billing.Project, opts ...client.CallOption) (*Result, error) {
	req := c.c.NewRequest(c.name, "Repository.InsertProject", in)
	out := new(Result)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryService) UpdateProject(ctx context.Context, in *billing.Project, opts ...client.CallOption) (*Result, error) {
	req := c.c.NewRequest(c.name, "Repository.UpdateProject", in)
	out := new(Result)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryService) DeleteProject(ctx context.Context, in *FindByUnderscoreId, opts ...client.CallOption) (*Result, error) {
	req := c.c.NewRequest(c.name, "Repository.DeleteProject", in)
	out := new(Result)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryService) ConvertProjectToProjectOrder(ctx context.Context, in *billing.Project, opts ...client.CallOption) (*billing.ProjectOrder, error) {
	req := c.c.NewRequest(c.name, "Repository.ConvertProjectToProjectOrder", in)
	out := new(billing.ProjectOrder)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryService) FindPaymentMethodByGroupAndCurrency(ctx context.Context, in *FindByGroupCurrencyRequest, opts ...client.CallOption) (*billing.PaymentMethod, error) {
	req := c.c.NewRequest(c.name, "Repository.FindPaymentMethodByGroupAndCurrency", in)
	out := new(billing.PaymentMethod)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryService) FindPaymentMethodsByCurrency(ctx context.Context, in *FindByIntValue, opts ...client.CallOption) (*PaymentMethods, error) {
	req := c.c.NewRequest(c.name, "Repository.FindPaymentMethodsByCurrency", in)
	out := new(PaymentMethods)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryService) FindCurrencyByCodeA3(ctx context.Context, in *FindByStringValue, opts ...client.CallOption) (*billing.Currency, error) {
	req := c.c.NewRequest(c.name, "Repository.FindCurrencyByCodeA3", in)
	out := new(billing.Currency)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryService) FindCurrencyByCodeInt(ctx context.Context, in *FindByIntValue, opts ...client.CallOption) (*billing.Currency, error) {
	req := c.c.NewRequest(c.name, "Repository.FindCurrencyByCodeInt", in)
	out := new(billing.Currency)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryService) FindOrderByProjectAndOrderId(ctx context.Context, in *FindByProjectOrderId, opts ...client.CallOption) (*billing.Order, error) {
	req := c.c.NewRequest(c.name, "Repository.FindOrderByProjectAndOrderId", in)
	out := new(billing.Order)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryService) CalculateCommission(ctx context.Context, in *CommissionRequest, opts ...client.CallOption) (*CommissionResponse, error) {
	req := c.c.NewRequest(c.name, "Repository.CalculateCommission", in)
	out := new(CommissionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryService) CalculateVat(ctx context.Context, in *CalculateVatRequest, opts ...client.CallOption) (*FloatValue, error) {
	req := c.c.NewRequest(c.name, "Repository.CalculateVat", in)
	out := new(FloatValue)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryService) FindBinData(ctx context.Context, in *FindByStringValue, opts ...client.CallOption) (*billing.BinData, error) {
	req := c.c.NewRequest(c.name, "Repository.FindBinData", in)
	out := new(billing.BinData)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryService) AddSavedCard(ctx context.Context, in *AddSavedCardRequest, opts ...client.CallOption) (*Result, error) {
	req := c.c.NewRequest(c.name, "Repository.AddSavedCard", in)
	out := new(Result)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryService) DeleteSavedCard(ctx context.Context, in *billing.SavedCardMasked, opts ...client.CallOption) (*Result, error) {
	req := c.c.NewRequest(c.name, "Repository.DeleteSavedCard", in)
	out := new(Result)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryService) FindSavedCardsByAccount(ctx context.Context, in *FindByStringValue, opts ...client.CallOption) (*billing.SavedCard, error) {
	req := c.c.NewRequest(c.name, "Repository.FindSavedCardsByAccount", in)
	out := new(billing.SavedCard)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Repository service

type RepositoryHandler interface {
	InsertOrder(context.Context, *billing.Order, *Result) error
	UpdateOrder(context.Context, *billing.Order, *Result) error
	FindOrderById(context.Context, *FindByUnderscoreId, *billing.Order) error
	ConvertAmount(context.Context, *ConvertRequest, *ConvertResponse) error
	GetConvertRate(context.Context, *ConvertRequest, *ConvertResponse) error
	UpdateMerchant(context.Context, *billing.Merchant, *Result) error
	FindMerchantById(context.Context, *FindByStringValue, *billing.Merchant) error
	FindProjectById(context.Context, *FindByUnderscoreId, *billing.Project) error
	InsertProject(context.Context, *billing.Project, *Result) error
	UpdateProject(context.Context, *billing.Project, *Result) error
	DeleteProject(context.Context, *FindByUnderscoreId, *Result) error
	ConvertProjectToProjectOrder(context.Context, *billing.Project, *billing.ProjectOrder) error
	FindPaymentMethodByGroupAndCurrency(context.Context, *FindByGroupCurrencyRequest, *billing.PaymentMethod) error
	FindPaymentMethodsByCurrency(context.Context, *FindByIntValue, *PaymentMethods) error
	FindCurrencyByCodeA3(context.Context, *FindByStringValue, *billing.Currency) error
	FindCurrencyByCodeInt(context.Context, *FindByIntValue, *billing.Currency) error
	FindOrderByProjectAndOrderId(context.Context, *FindByProjectOrderId, *billing.Order) error
	CalculateCommission(context.Context, *CommissionRequest, *CommissionResponse) error
	CalculateVat(context.Context, *CalculateVatRequest, *FloatValue) error
	FindBinData(context.Context, *FindByStringValue, *billing.BinData) error
	AddSavedCard(context.Context, *AddSavedCardRequest, *Result) error
	DeleteSavedCard(context.Context, *billing.SavedCardMasked, *Result) error
	FindSavedCardsByAccount(context.Context, *FindByStringValue, *billing.SavedCard) error
}

func RegisterRepositoryHandler(s server.Server, hdlr RepositoryHandler, opts ...server.HandlerOption) error {
	type repository interface {
		InsertOrder(ctx context.Context, in *billing.Order, out *Result) error
		UpdateOrder(ctx context.Context, in *billing.Order, out *Result) error
		FindOrderById(ctx context.Context, in *FindByUnderscoreId, out *billing.Order) error
		ConvertAmount(ctx context.Context, in *ConvertRequest, out *ConvertResponse) error
		GetConvertRate(ctx context.Context, in *ConvertRequest, out *ConvertResponse) error
		UpdateMerchant(ctx context.Context, in *billing.Merchant, out *Result) error
		FindMerchantById(ctx context.Context, in *FindByStringValue, out *billing.Merchant) error
		FindProjectById(ctx context.Context, in *FindByUnderscoreId, out *billing.Project) error
		InsertProject(ctx context.Context, in *billing.Project, out *Result) error
		UpdateProject(ctx context.Context, in *billing.Project, out *Result) error
		DeleteProject(ctx context.Context, in *FindByUnderscoreId, out *Result) error
		ConvertProjectToProjectOrder(ctx context.Context, in *billing.Project, out *billing.ProjectOrder) error
		FindPaymentMethodByGroupAndCurrency(ctx context.Context, in *FindByGroupCurrencyRequest, out *billing.PaymentMethod) error
		FindPaymentMethodsByCurrency(ctx context.Context, in *FindByIntValue, out *PaymentMethods) error
		FindCurrencyByCodeA3(ctx context.Context, in *FindByStringValue, out *billing.Currency) error
		FindCurrencyByCodeInt(ctx context.Context, in *FindByIntValue, out *billing.Currency) error
		FindOrderByProjectAndOrderId(ctx context.Context, in *FindByProjectOrderId, out *billing.Order) error
		CalculateCommission(ctx context.Context, in *CommissionRequest, out *CommissionResponse) error
		CalculateVat(ctx context.Context, in *CalculateVatRequest, out *FloatValue) error
		FindBinData(ctx context.Context, in *FindByStringValue, out *billing.BinData) error
		AddSavedCard(ctx context.Context, in *AddSavedCardRequest, out *Result) error
		DeleteSavedCard(ctx context.Context, in *billing.SavedCardMasked, out *Result) error
		FindSavedCardsByAccount(ctx context.Context, in *FindByStringValue, out *billing.SavedCard) error
	}
	type Repository struct {
		repository
	}
	h := &repositoryHandler{hdlr}
	return s.Handle(s.NewHandler(&Repository{h}, opts...))
}

type repositoryHandler struct {
	RepositoryHandler
}

func (h *repositoryHandler) InsertOrder(ctx context.Context, in *billing.Order, out *Result) error {
	return h.RepositoryHandler.InsertOrder(ctx, in, out)
}

func (h *repositoryHandler) UpdateOrder(ctx context.Context, in *billing.Order, out *Result) error {
	return h.RepositoryHandler.UpdateOrder(ctx, in, out)
}

func (h *repositoryHandler) FindOrderById(ctx context.Context, in *FindByUnderscoreId, out *billing.Order) error {
	return h.RepositoryHandler.FindOrderById(ctx, in, out)
}

func (h *repositoryHandler) ConvertAmount(ctx context.Context, in *ConvertRequest, out *ConvertResponse) error {
	return h.RepositoryHandler.ConvertAmount(ctx, in, out)
}

func (h *repositoryHandler) GetConvertRate(ctx context.Context, in *ConvertRequest, out *ConvertResponse) error {
	return h.RepositoryHandler.GetConvertRate(ctx, in, out)
}

func (h *repositoryHandler) UpdateMerchant(ctx context.Context, in *billing.Merchant, out *Result) error {
	return h.RepositoryHandler.UpdateMerchant(ctx, in, out)
}

func (h *repositoryHandler) FindMerchantById(ctx context.Context, in *FindByStringValue, out *billing.Merchant) error {
	return h.RepositoryHandler.FindMerchantById(ctx, in, out)
}

func (h *repositoryHandler) FindProjectById(ctx context.Context, in *FindByUnderscoreId, out *billing.Project) error {
	return h.RepositoryHandler.FindProjectById(ctx, in, out)
}

func (h *repositoryHandler) InsertProject(ctx context.Context, in *billing.Project, out *Result) error {
	return h.RepositoryHandler.InsertProject(ctx, in, out)
}

func (h *repositoryHandler) UpdateProject(ctx context.Context, in *billing.Project, out *Result) error {
	return h.RepositoryHandler.UpdateProject(ctx, in, out)
}

func (h *repositoryHandler) DeleteProject(ctx context.Context, in *FindByUnderscoreId, out *Result) error {
	return h.RepositoryHandler.DeleteProject(ctx, in, out)
}

func (h *repositoryHandler) ConvertProjectToProjectOrder(ctx context.Context, in *billing.Project, out *billing.ProjectOrder) error {
	return h.RepositoryHandler.ConvertProjectToProjectOrder(ctx, in, out)
}

func (h *repositoryHandler) FindPaymentMethodByGroupAndCurrency(ctx context.Context, in *FindByGroupCurrencyRequest, out *billing.PaymentMethod) error {
	return h.RepositoryHandler.FindPaymentMethodByGroupAndCurrency(ctx, in, out)
}

func (h *repositoryHandler) FindPaymentMethodsByCurrency(ctx context.Context, in *FindByIntValue, out *PaymentMethods) error {
	return h.RepositoryHandler.FindPaymentMethodsByCurrency(ctx, in, out)
}

func (h *repositoryHandler) FindCurrencyByCodeA3(ctx context.Context, in *FindByStringValue, out *billing.Currency) error {
	return h.RepositoryHandler.FindCurrencyByCodeA3(ctx, in, out)
}

func (h *repositoryHandler) FindCurrencyByCodeInt(ctx context.Context, in *FindByIntValue, out *billing.Currency) error {
	return h.RepositoryHandler.FindCurrencyByCodeInt(ctx, in, out)
}

func (h *repositoryHandler) FindOrderByProjectAndOrderId(ctx context.Context, in *FindByProjectOrderId, out *billing.Order) error {
	return h.RepositoryHandler.FindOrderByProjectAndOrderId(ctx, in, out)
}

func (h *repositoryHandler) CalculateCommission(ctx context.Context, in *CommissionRequest, out *CommissionResponse) error {
	return h.RepositoryHandler.CalculateCommission(ctx, in, out)
}

func (h *repositoryHandler) CalculateVat(ctx context.Context, in *CalculateVatRequest, out *FloatValue) error {
	return h.RepositoryHandler.CalculateVat(ctx, in, out)
}

func (h *repositoryHandler) FindBinData(ctx context.Context, in *FindByStringValue, out *billing.BinData) error {
	return h.RepositoryHandler.FindBinData(ctx, in, out)
}

func (h *repositoryHandler) AddSavedCard(ctx context.Context, in *AddSavedCardRequest, out *Result) error {
	return h.RepositoryHandler.AddSavedCard(ctx, in, out)
}

func (h *repositoryHandler) DeleteSavedCard(ctx context.Context, in *billing.SavedCardMasked, out *Result) error {
	return h.RepositoryHandler.DeleteSavedCard(ctx, in, out)
}

func (h *repositoryHandler) FindSavedCardsByAccount(ctx context.Context, in *FindByStringValue, out *billing.SavedCard) error {
	return h.RepositoryHandler.FindSavedCardsByAccount(ctx, in, out)
}
