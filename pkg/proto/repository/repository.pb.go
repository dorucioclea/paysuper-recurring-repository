// Code generated by protoc-gen-go. DO NOT EDIT.
// source: repository/repository.proto

package repository // import "github.com/ProtocolONE/payone-repository/pkg/proto/repository"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import billing "github.com/ProtocolONE/payone-repository/pkg/proto/billing"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Result struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *Result) Reset()         { *m = Result{} }
func (m *Result) String() string { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()    {}
func (*Result) Descriptor() ([]byte, []int) {
	return fileDescriptor_repository_e2369bde316b44eb, []int{0}
}
func (m *Result) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Result.Unmarshal(m, b)
}
func (m *Result) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Result.Marshal(b, m, deterministic)
}
func (dst *Result) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Result.Merge(dst, src)
}
func (m *Result) XXX_Size() int {
	return xxx_messageInfo_Result.Size(m)
}
func (m *Result) XXX_DiscardUnknown() {
	xxx_messageInfo_Result.DiscardUnknown(m)
}

var xxx_messageInfo_Result proto.InternalMessageInfo

type ConvertRequest struct {
	CurrencyFrom         int32    `protobuf:"varint,1,opt,name=currency_from,json=currencyFrom,proto3" json:"currency_from,omitempty"`
	CurrencyTo           int32    `protobuf:"varint,2,opt,name=currency_to,json=currencyTo,proto3" json:"currency_to,omitempty"`
	Amount               float64  `protobuf:"fixed64,3,opt,name=amount,proto3" json:"amount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *ConvertRequest) Reset()         { *m = ConvertRequest{} }
func (m *ConvertRequest) String() string { return proto.CompactTextString(m) }
func (*ConvertRequest) ProtoMessage()    {}
func (*ConvertRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_repository_e2369bde316b44eb, []int{1}
}
func (m *ConvertRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConvertRequest.Unmarshal(m, b)
}
func (m *ConvertRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConvertRequest.Marshal(b, m, deterministic)
}
func (dst *ConvertRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConvertRequest.Merge(dst, src)
}
func (m *ConvertRequest) XXX_Size() int {
	return xxx_messageInfo_ConvertRequest.Size(m)
}
func (m *ConvertRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ConvertRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ConvertRequest proto.InternalMessageInfo

func (m *ConvertRequest) GetCurrencyFrom() int32 {
	if m != nil {
		return m.CurrencyFrom
	}
	return 0
}

func (m *ConvertRequest) GetCurrencyTo() int32 {
	if m != nil {
		return m.CurrencyTo
	}
	return 0
}

func (m *ConvertRequest) GetAmount() float64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type ConvertResponse struct {
	Amount               float64  `protobuf:"fixed64,1,opt,name=amount,proto3" json:"amount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *ConvertResponse) Reset()         { *m = ConvertResponse{} }
func (m *ConvertResponse) String() string { return proto.CompactTextString(m) }
func (*ConvertResponse) ProtoMessage()    {}
func (*ConvertResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_repository_e2369bde316b44eb, []int{2}
}
func (m *ConvertResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConvertResponse.Unmarshal(m, b)
}
func (m *ConvertResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConvertResponse.Marshal(b, m, deterministic)
}
func (dst *ConvertResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConvertResponse.Merge(dst, src)
}
func (m *ConvertResponse) XXX_Size() int {
	return xxx_messageInfo_ConvertResponse.Size(m)
}
func (m *ConvertResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ConvertResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ConvertResponse proto.InternalMessageInfo

func (m *ConvertResponse) GetAmount() float64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type FindByUnderscoreId struct {
	// @inject_tag: bson:"_id,bsonobjectid"
	Id                   []byte   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" bson:"_id,bsonobjectid"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *FindByUnderscoreId) Reset()         { *m = FindByUnderscoreId{} }
func (m *FindByUnderscoreId) String() string { return proto.CompactTextString(m) }
func (*FindByUnderscoreId) ProtoMessage()    {}
func (*FindByUnderscoreId) Descriptor() ([]byte, []int) {
	return fileDescriptor_repository_e2369bde316b44eb, []int{3}
}
func (m *FindByUnderscoreId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindByUnderscoreId.Unmarshal(m, b)
}
func (m *FindByUnderscoreId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindByUnderscoreId.Marshal(b, m, deterministic)
}
func (dst *FindByUnderscoreId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindByUnderscoreId.Merge(dst, src)
}
func (m *FindByUnderscoreId) XXX_Size() int {
	return xxx_messageInfo_FindByUnderscoreId.Size(m)
}
func (m *FindByUnderscoreId) XXX_DiscardUnknown() {
	xxx_messageInfo_FindByUnderscoreId.DiscardUnknown(m)
}

var xxx_messageInfo_FindByUnderscoreId proto.InternalMessageInfo

func (m *FindByUnderscoreId) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

type FindByStringValue struct {
	Value                string   `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *FindByStringValue) Reset()         { *m = FindByStringValue{} }
func (m *FindByStringValue) String() string { return proto.CompactTextString(m) }
func (*FindByStringValue) ProtoMessage()    {}
func (*FindByStringValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_repository_e2369bde316b44eb, []int{4}
}
func (m *FindByStringValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindByStringValue.Unmarshal(m, b)
}
func (m *FindByStringValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindByStringValue.Marshal(b, m, deterministic)
}
func (dst *FindByStringValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindByStringValue.Merge(dst, src)
}
func (m *FindByStringValue) XXX_Size() int {
	return xxx_messageInfo_FindByStringValue.Size(m)
}
func (m *FindByStringValue) XXX_DiscardUnknown() {
	xxx_messageInfo_FindByStringValue.DiscardUnknown(m)
}

var xxx_messageInfo_FindByStringValue proto.InternalMessageInfo

func (m *FindByStringValue) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type FindByGroupCurrencyRequest struct {
	// @inject_tag: bson:"group"
	Group string `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty" bson:"group"`
	// @inject_tag: bson:"currency"
	Currency             int32    `protobuf:"varint,2,opt,name=currency,proto3" json:"currency,omitempty" bson:"currency"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *FindByGroupCurrencyRequest) Reset()         { *m = FindByGroupCurrencyRequest{} }
func (m *FindByGroupCurrencyRequest) String() string { return proto.CompactTextString(m) }
func (*FindByGroupCurrencyRequest) ProtoMessage()    {}
func (*FindByGroupCurrencyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_repository_e2369bde316b44eb, []int{5}
}
func (m *FindByGroupCurrencyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindByGroupCurrencyRequest.Unmarshal(m, b)
}
func (m *FindByGroupCurrencyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindByGroupCurrencyRequest.Marshal(b, m, deterministic)
}
func (dst *FindByGroupCurrencyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindByGroupCurrencyRequest.Merge(dst, src)
}
func (m *FindByGroupCurrencyRequest) XXX_Size() int {
	return xxx_messageInfo_FindByGroupCurrencyRequest.Size(m)
}
func (m *FindByGroupCurrencyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FindByGroupCurrencyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FindByGroupCurrencyRequest proto.InternalMessageInfo

func (m *FindByGroupCurrencyRequest) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

func (m *FindByGroupCurrencyRequest) GetCurrency() int32 {
	if m != nil {
		return m.Currency
	}
	return 0
}

type FindOrderByProjectOrderIdRequest struct {
	// @inject_tag: bson:"project_order_id"
	OrderId string `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty" bson:"project_order_id"`
	// @inject_tag: bson:"project.id,bsonobjectid"
	ProjectId            []byte   `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty" bson:"project.id,bsonobjectid"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *FindOrderByProjectOrderIdRequest) Reset()         { *m = FindOrderByProjectOrderIdRequest{} }
func (m *FindOrderByProjectOrderIdRequest) String() string { return proto.CompactTextString(m) }
func (*FindOrderByProjectOrderIdRequest) ProtoMessage()    {}
func (*FindOrderByProjectOrderIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_repository_e2369bde316b44eb, []int{6}
}
func (m *FindOrderByProjectOrderIdRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindOrderByProjectOrderIdRequest.Unmarshal(m, b)
}
func (m *FindOrderByProjectOrderIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindOrderByProjectOrderIdRequest.Marshal(b, m, deterministic)
}
func (dst *FindOrderByProjectOrderIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindOrderByProjectOrderIdRequest.Merge(dst, src)
}
func (m *FindOrderByProjectOrderIdRequest) XXX_Size() int {
	return xxx_messageInfo_FindOrderByProjectOrderIdRequest.Size(m)
}
func (m *FindOrderByProjectOrderIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FindOrderByProjectOrderIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FindOrderByProjectOrderIdRequest proto.InternalMessageInfo

func (m *FindOrderByProjectOrderIdRequest) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

func (m *FindOrderByProjectOrderIdRequest) GetProjectId() []byte {
	if m != nil {
		return m.ProjectId
	}
	return nil
}

type Projects struct {
	Projects             []*billing.Project `protobuf:"bytes,1,rep,name=projects,proto3" json:"projects,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-" bson:"-"`
	XXX_unrecognized     []byte             `json:"-" bson:"-"`
	XXX_sizecache        int32              `json:"-" bson:"-"`
}

func (m *Projects) Reset()         { *m = Projects{} }
func (m *Projects) String() string { return proto.CompactTextString(m) }
func (*Projects) ProtoMessage()    {}
func (*Projects) Descriptor() ([]byte, []int) {
	return fileDescriptor_repository_e2369bde316b44eb, []int{7}
}
func (m *Projects) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Projects.Unmarshal(m, b)
}
func (m *Projects) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Projects.Marshal(b, m, deterministic)
}
func (dst *Projects) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Projects.Merge(dst, src)
}
func (m *Projects) XXX_Size() int {
	return xxx_messageInfo_Projects.Size(m)
}
func (m *Projects) XXX_DiscardUnknown() {
	xxx_messageInfo_Projects.DiscardUnknown(m)
}

var xxx_messageInfo_Projects proto.InternalMessageInfo

func (m *Projects) GetProjects() []*billing.Project {
	if m != nil {
		return m.Projects
	}
	return nil
}

type PaymentMethods struct {
	PaymentMethods       []*billing.PaymentMethod `protobuf:"bytes,1,rep,name=payment_methods,json=paymentMethods,proto3" json:"payment_methods,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-" bson:"-"`
	XXX_unrecognized     []byte                   `json:"-" bson:"-"`
	XXX_sizecache        int32                    `json:"-" bson:"-"`
}

func (m *PaymentMethods) Reset()         { *m = PaymentMethods{} }
func (m *PaymentMethods) String() string { return proto.CompactTextString(m) }
func (*PaymentMethods) ProtoMessage()    {}
func (*PaymentMethods) Descriptor() ([]byte, []int) {
	return fileDescriptor_repository_e2369bde316b44eb, []int{8}
}
func (m *PaymentMethods) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PaymentMethods.Unmarshal(m, b)
}
func (m *PaymentMethods) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PaymentMethods.Marshal(b, m, deterministic)
}
func (dst *PaymentMethods) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PaymentMethods.Merge(dst, src)
}
func (m *PaymentMethods) XXX_Size() int {
	return xxx_messageInfo_PaymentMethods.Size(m)
}
func (m *PaymentMethods) XXX_DiscardUnknown() {
	xxx_messageInfo_PaymentMethods.DiscardUnknown(m)
}

var xxx_messageInfo_PaymentMethods proto.InternalMessageInfo

func (m *PaymentMethods) GetPaymentMethods() []*billing.PaymentMethod {
	if m != nil {
		return m.PaymentMethods
	}
	return nil
}

func init() {
	proto.RegisterType((*Result)(nil), "repository.Result")
	proto.RegisterType((*ConvertRequest)(nil), "repository.ConvertRequest")
	proto.RegisterType((*ConvertResponse)(nil), "repository.ConvertResponse")
	proto.RegisterType((*FindByUnderscoreId)(nil), "repository.FindByUnderscoreId")
	proto.RegisterType((*FindByStringValue)(nil), "repository.FindByStringValue")
	proto.RegisterType((*FindByGroupCurrencyRequest)(nil), "repository.FindByGroupCurrencyRequest")
	proto.RegisterType((*FindOrderByProjectOrderIdRequest)(nil), "repository.FindOrderByProjectOrderIdRequest")
	proto.RegisterType((*Projects)(nil), "repository.Projects")
	proto.RegisterType((*PaymentMethods)(nil), "repository.PaymentMethods")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RepositoryClient is the client API for Repository service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RepositoryClient interface {
	InsertOrder(ctx context.Context, in *billing.Order, opts ...grpc.CallOption) (*Result, error)
	UpdateOrder(ctx context.Context, in *billing.Order, opts ...grpc.CallOption) (*Result, error)
	FindOrderById(ctx context.Context, in *FindByUnderscoreId, opts ...grpc.CallOption) (*billing.Order, error)
	ConvertAmount(ctx context.Context, in *ConvertRequest, opts ...grpc.CallOption) (*ConvertResponse, error)
	GetConvertRate(ctx context.Context, in *ConvertRequest, opts ...grpc.CallOption) (*ConvertResponse, error)
	UpdateMerchant(ctx context.Context, in *billing.Merchant, opts ...grpc.CallOption) (*Result, error)
	FindProjectById(ctx context.Context, in *FindByUnderscoreId, opts ...grpc.CallOption) (*billing.Project, error)
	ConvertProjectToProjectOrder(ctx context.Context, in *billing.Project, opts ...grpc.CallOption) (*billing.ProjectOrder, error)
	FindPaymentMethodsByGroupAndCurrency(ctx context.Context, in *FindByGroupCurrencyRequest, opts ...grpc.CallOption) (*PaymentMethods, error)
	FindCurrencyByCodeA3(ctx context.Context, in *FindByStringValue, opts ...grpc.CallOption) (*billing.Currency, error)
}

type repositoryClient struct {
	cc *grpc.ClientConn
}

func NewRepositoryClient(cc *grpc.ClientConn) RepositoryClient {
	return &repositoryClient{cc}
}

func (c *repositoryClient) InsertOrder(ctx context.Context, in *billing.Order, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/repository.Repository/InsertOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryClient) UpdateOrder(ctx context.Context, in *billing.Order, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/repository.Repository/UpdateOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryClient) FindOrderById(ctx context.Context, in *FindByUnderscoreId, opts ...grpc.CallOption) (*billing.Order, error) {
	out := new(billing.Order)
	err := c.cc.Invoke(ctx, "/repository.Repository/FindOrderById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryClient) ConvertAmount(ctx context.Context, in *ConvertRequest, opts ...grpc.CallOption) (*ConvertResponse, error) {
	out := new(ConvertResponse)
	err := c.cc.Invoke(ctx, "/repository.Repository/ConvertAmount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryClient) GetConvertRate(ctx context.Context, in *ConvertRequest, opts ...grpc.CallOption) (*ConvertResponse, error) {
	out := new(ConvertResponse)
	err := c.cc.Invoke(ctx, "/repository.Repository/GetConvertRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryClient) UpdateMerchant(ctx context.Context, in *billing.Merchant, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/repository.Repository/UpdateMerchant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryClient) FindProjectById(ctx context.Context, in *FindByUnderscoreId, opts ...grpc.CallOption) (*billing.Project, error) {
	out := new(billing.Project)
	err := c.cc.Invoke(ctx, "/repository.Repository/FindProjectById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryClient) ConvertProjectToProjectOrder(ctx context.Context, in *billing.Project, opts ...grpc.CallOption) (*billing.ProjectOrder, error) {
	out := new(billing.ProjectOrder)
	err := c.cc.Invoke(ctx, "/repository.Repository/ConvertProjectToProjectOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryClient) FindPaymentMethodsByGroupAndCurrency(ctx context.Context, in *FindByGroupCurrencyRequest, opts ...grpc.CallOption) (*PaymentMethods, error) {
	out := new(PaymentMethods)
	err := c.cc.Invoke(ctx, "/repository.Repository/FindPaymentMethodsByGroupAndCurrency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryClient) FindCurrencyByCodeA3(ctx context.Context, in *FindByStringValue, opts ...grpc.CallOption) (*billing.Currency, error) {
	out := new(billing.Currency)
	err := c.cc.Invoke(ctx, "/repository.Repository/FindCurrencyByCodeA3", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RepositoryServer is the server API for Repository service.
type RepositoryServer interface {
	InsertOrder(context.Context, *billing.Order) (*Result, error)
	UpdateOrder(context.Context, *billing.Order) (*Result, error)
	FindOrderById(context.Context, *FindByUnderscoreId) (*billing.Order, error)
	ConvertAmount(context.Context, *ConvertRequest) (*ConvertResponse, error)
	GetConvertRate(context.Context, *ConvertRequest) (*ConvertResponse, error)
	UpdateMerchant(context.Context, *billing.Merchant) (*Result, error)
	FindProjectById(context.Context, *FindByUnderscoreId) (*billing.Project, error)
	ConvertProjectToProjectOrder(context.Context, *billing.Project) (*billing.ProjectOrder, error)
	FindPaymentMethodsByGroupAndCurrency(context.Context, *FindByGroupCurrencyRequest) (*PaymentMethods, error)
	FindCurrencyByCodeA3(context.Context, *FindByStringValue) (*billing.Currency, error)
}

func RegisterRepositoryServer(s *grpc.Server, srv RepositoryServer) {
	s.RegisterService(&_Repository_serviceDesc, srv)
}

func _Repository_InsertOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(billing.Order)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServer).InsertOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository.Repository/InsertOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServer).InsertOrder(ctx, req.(*billing.Order))
	}
	return interceptor(ctx, in, info, handler)
}

func _Repository_UpdateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(billing.Order)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServer).UpdateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository.Repository/UpdateOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServer).UpdateOrder(ctx, req.(*billing.Order))
	}
	return interceptor(ctx, in, info, handler)
}

func _Repository_FindOrderById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByUnderscoreId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServer).FindOrderById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository.Repository/FindOrderById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServer).FindOrderById(ctx, req.(*FindByUnderscoreId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Repository_ConvertAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConvertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServer).ConvertAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository.Repository/ConvertAmount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServer).ConvertAmount(ctx, req.(*ConvertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Repository_GetConvertRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConvertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServer).GetConvertRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository.Repository/GetConvertRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServer).GetConvertRate(ctx, req.(*ConvertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Repository_UpdateMerchant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(billing.Merchant)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServer).UpdateMerchant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository.Repository/UpdateMerchant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServer).UpdateMerchant(ctx, req.(*billing.Merchant))
	}
	return interceptor(ctx, in, info, handler)
}

func _Repository_FindProjectById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByUnderscoreId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServer).FindProjectById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository.Repository/FindProjectById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServer).FindProjectById(ctx, req.(*FindByUnderscoreId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Repository_ConvertProjectToProjectOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(billing.Project)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServer).ConvertProjectToProjectOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository.Repository/ConvertProjectToProjectOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServer).ConvertProjectToProjectOrder(ctx, req.(*billing.Project))
	}
	return interceptor(ctx, in, info, handler)
}

func _Repository_FindPaymentMethodsByGroupAndCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByGroupCurrencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServer).FindPaymentMethodsByGroupAndCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository.Repository/FindPaymentMethodsByGroupAndCurrency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServer).FindPaymentMethodsByGroupAndCurrency(ctx, req.(*FindByGroupCurrencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Repository_FindCurrencyByCodeA3_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByStringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServer).FindCurrencyByCodeA3(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository.Repository/FindCurrencyByCodeA3",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServer).FindCurrencyByCodeA3(ctx, req.(*FindByStringValue))
	}
	return interceptor(ctx, in, info, handler)
}

var _Repository_serviceDesc = grpc.ServiceDesc{
	ServiceName: "repository.Repository",
	HandlerType: (*RepositoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InsertOrder",
			Handler:    _Repository_InsertOrder_Handler,
		},
		{
			MethodName: "UpdateOrder",
			Handler:    _Repository_UpdateOrder_Handler,
		},
		{
			MethodName: "FindOrderById",
			Handler:    _Repository_FindOrderById_Handler,
		},
		{
			MethodName: "ConvertAmount",
			Handler:    _Repository_ConvertAmount_Handler,
		},
		{
			MethodName: "GetConvertRate",
			Handler:    _Repository_GetConvertRate_Handler,
		},
		{
			MethodName: "UpdateMerchant",
			Handler:    _Repository_UpdateMerchant_Handler,
		},
		{
			MethodName: "FindProjectById",
			Handler:    _Repository_FindProjectById_Handler,
		},
		{
			MethodName: "ConvertProjectToProjectOrder",
			Handler:    _Repository_ConvertProjectToProjectOrder_Handler,
		},
		{
			MethodName: "FindPaymentMethodsByGroupAndCurrency",
			Handler:    _Repository_FindPaymentMethodsByGroupAndCurrency_Handler,
		},
		{
			MethodName: "FindCurrencyByCodeA3",
			Handler:    _Repository_FindCurrencyByCodeA3_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "repository/repository.proto",
}

func init() {
	proto.RegisterFile("repository/repository.proto", fileDescriptor_repository_e2369bde316b44eb)
}

var fileDescriptor_repository_e2369bde316b44eb = []byte{
	// 616 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0xdf, 0x4f, 0xd4, 0x40,
	0x10, 0xbe, 0x1e, 0x39, 0x3c, 0x06, 0x28, 0xb2, 0x01, 0x72, 0x16, 0xd1, 0xcb, 0x4a, 0x0c, 0x24,
	0x7a, 0x97, 0xc0, 0x8b, 0x3e, 0x18, 0x72, 0x47, 0x80, 0x54, 0xc3, 0x0f, 0x2b, 0xf8, 0x60, 0x4c,
	0x48, 0xe9, 0xae, 0x47, 0xb5, 0xdd, 0xad, 0xdb, 0x2d, 0x49, 0xff, 0x54, 0xff, 0x1b, 0xd3, 0xed,
	0x6e, 0xaf, 0xe5, 0x30, 0xd1, 0xf8, 0x74, 0x9d, 0x6f, 0xbf, 0xf9, 0x6e, 0x66, 0xf6, 0xdb, 0x81,
	0x4d, 0x41, 0x13, 0x9e, 0x86, 0x92, 0x8b, 0x7c, 0x38, 0xfd, 0x1c, 0x24, 0x82, 0x4b, 0x8e, 0x60,
	0x8a, 0x38, 0xeb, 0x37, 0x61, 0x14, 0x85, 0x6c, 0x32, 0xd4, 0xbf, 0x25, 0x05, 0x77, 0x61, 0xde,
	0xa3, 0x69, 0x16, 0x49, 0xcc, 0xc0, 0x3e, 0xe4, 0xec, 0x8e, 0x0a, 0xe9, 0xd1, 0x9f, 0x19, 0x4d,
	0x25, 0x7a, 0x01, 0xcb, 0x41, 0x26, 0x04, 0x65, 0x41, 0x7e, 0xfd, 0x4d, 0xf0, 0xb8, 0x67, 0xf5,
	0xad, 0x9d, 0x8e, 0xb7, 0x64, 0xc0, 0x63, 0xc1, 0x63, 0xf4, 0x1c, 0x16, 0x2b, 0x92, 0xe4, 0xbd,
	0xb6, 0xa2, 0x80, 0x81, 0x2e, 0x39, 0xda, 0x80, 0x79, 0x3f, 0xe6, 0x19, 0x93, 0xbd, 0xb9, 0xbe,
	0xb5, 0x63, 0x79, 0x3a, 0xc2, 0xbb, 0xb0, 0x52, 0xfd, 0x5f, 0x9a, 0x70, 0x96, 0xd2, 0x1a, 0xd5,
	0x6a, 0x50, 0xb7, 0x01, 0x1d, 0x87, 0x8c, 0x8c, 0xf3, 0x2b, 0x46, 0xa8, 0x48, 0x03, 0x2e, 0xa8,
	0x4b, 0x90, 0x0d, 0xed, 0x90, 0x28, 0xe6, 0x92, 0xd7, 0x0e, 0x09, 0xde, 0x85, 0xd5, 0x92, 0xf5,
	0x49, 0x8a, 0x90, 0x4d, 0x3e, 0xfb, 0x51, 0x46, 0xd1, 0x1a, 0x74, 0xee, 0x8a, 0x0f, 0xc5, 0x5b,
	0xf0, 0xca, 0x00, 0x9f, 0x81, 0x53, 0x52, 0x4f, 0x04, 0xcf, 0x92, 0x43, 0x5d, 0xac, 0xe9, 0x7b,
	0x0d, 0x3a, 0x93, 0x02, 0x37, 0x39, 0x2a, 0x40, 0x0e, 0x74, 0x4d, 0x57, 0xba, 0xcb, 0x2a, 0xc6,
	0x5f, 0xa1, 0x5f, 0xe8, 0x9d, 0x0b, 0x42, 0xc5, 0x38, 0xbf, 0x10, 0xfc, 0x3b, 0x0d, 0xa4, 0x8a,
	0x5c, 0x62, 0x54, 0x9f, 0x40, 0x97, 0x17, 0xc8, 0xb5, 0x2e, 0x7a, 0xc1, 0x7b, 0xc4, 0x4b, 0x06,
	0xda, 0x02, 0x48, 0xca, 0x9c, 0xe2, 0xb0, 0xad, 0x3a, 0x5a, 0xd0, 0x88, 0x4b, 0xf0, 0x1b, 0xe8,
	0x6a, 0xc9, 0x14, 0xbd, 0x82, 0xae, 0x3e, 0x48, 0x7b, 0x56, 0x7f, 0x6e, 0x67, 0x71, 0xef, 0xf1,
	0xc0, 0xdc, 0xa8, 0x26, 0x79, 0x15, 0x03, 0x7f, 0x04, 0xfb, 0xc2, 0xcf, 0x63, 0xca, 0xe4, 0x29,
	0x95, 0xb7, 0x9c, 0xa4, 0xe8, 0x00, 0x56, 0x92, 0x12, 0xb9, 0x8e, 0x4b, 0x48, 0xcb, 0x6c, 0x4c,
	0x65, 0xea, 0x19, 0x9e, 0x9d, 0x34, 0x04, 0xf6, 0x7e, 0x75, 0x00, 0xbc, 0xca, 0x56, 0x68, 0x1f,
	0x16, 0x5d, 0x96, 0x52, 0x51, 0x76, 0x8b, 0xec, 0x4a, 0x45, 0xc5, 0x0e, 0x1a, 0xd4, 0x4c, 0xa9,
	0x8d, 0xd6, 0x2a, 0x92, 0xae, 0x12, 0xe2, 0x4b, 0xfa, 0x2f, 0x49, 0x23, 0x58, 0xae, 0xcd, 0xd8,
	0x25, 0xe8, 0x59, 0x9d, 0x36, 0xeb, 0x0f, 0xe7, 0x9e, 0x2c, 0x6e, 0xa1, 0xf7, 0xb0, 0xac, 0x2d,
	0x37, 0x52, 0xc6, 0x42, 0x4e, 0x5d, 0xa2, 0xe9, 0x7e, 0x67, 0xf3, 0xc1, 0xb3, 0xd2, 0xa9, 0xb8,
	0x85, 0x3e, 0x80, 0x7d, 0x42, 0xa5, 0xc1, 0x7d, 0x49, 0xff, 0x47, 0xec, 0x2d, 0xd8, 0xe5, 0x40,
	0x4e, 0xa9, 0x08, 0x6e, 0x7d, 0x26, 0xd1, 0x6a, 0x55, 0xbc, 0x81, 0xfe, 0x30, 0x96, 0x23, 0x58,
	0x29, 0x7a, 0xd7, 0x77, 0xff, 0x57, 0x83, 0x99, 0x71, 0x0c, 0x6e, 0x21, 0x17, 0x9e, 0xea, 0xb2,
	0x34, 0x76, 0xc9, 0xeb, 0x36, 0x46, 0x33, 0x39, 0xce, 0xfa, 0x7d, 0xc4, 0x4c, 0x39, 0x82, 0x6d,
	0x55, 0x51, 0xc3, 0x37, 0xfa, 0xa9, 0x8d, 0x18, 0x31, 0xaf, 0x0d, 0xbd, 0x9c, 0x2d, 0xf3, 0xa1,
	0xe7, 0xe8, 0x34, 0xe6, 0xda, 0x54, 0x55, 0x77, 0xba, 0x56, 0xe4, 0x9a, 0xa4, 0x71, 0x7e, 0xc8,
	0x09, 0x1d, 0xed, 0xa3, 0xad, 0x59, 0xf5, 0xda, 0x5e, 0x70, 0xa6, 0xf3, 0x35, 0x99, 0xb8, 0x35,
	0x3e, 0xf8, 0xf2, 0x6e, 0x12, 0xca, 0xdb, 0xec, 0x66, 0x10, 0xf0, 0x78, 0x78, 0x51, 0x2c, 0xc8,
	0x80, 0x47, 0xe7, 0x67, 0x47, 0xc3, 0xc4, 0xcf, 0x39, 0xa3, 0xaf, 0x6b, 0xcb, 0x36, 0xf9, 0x31,
	0x19, 0xaa, 0x15, 0x5a, 0x5b, 0xbb, 0x37, 0xf3, 0x0a, 0xd9, 0xff, 0x1d, 0x00, 0x00, 0xff, 0xff,
	0xb1, 0xd2, 0x20, 0x2c, 0x96, 0x05, 0x00, 0x00,
}
