// Code generated by protoc-gen-go. DO NOT EDIT.
// source: order.proto

package order

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import timestamp "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PayerData struct {
	Ip                   string   `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	CountryCodeA2        string   `protobuf:"bytes,2,opt,name=country_code_a2,json=countryCodeA2,proto3" json:"country_code_a2,omitempty"`
	CountryName          *Name    `protobuf:"bytes,3,opt,name=country_name,json=countryName,proto3" json:"country_name,omitempty"`
	City                 *Name    `protobuf:"bytes,4,opt,name=city,proto3" json:"city,omitempty"`
	Subdivision          string   `protobuf:"bytes,5,opt,name=subdivision,proto3" json:"subdivision,omitempty"`
	Timezone             string   `protobuf:"bytes,6,opt,name=timezone,proto3" json:"timezone,omitempty"`
	Phone                string   `protobuf:"bytes,7,opt,name=phone,proto3" json:"phone,omitempty"`
	Email                string   `protobuf:"bytes,8,opt,name=email,proto3" json:"email,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PayerData) Reset()         { *m = PayerData{} }
func (m *PayerData) String() string { return proto.CompactTextString(m) }
func (*PayerData) ProtoMessage()    {}
func (*PayerData) Descriptor() ([]byte, []int) {
	return fileDescriptor_order_4c3532e487a64bbf, []int{0}
}
func (m *PayerData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PayerData.Unmarshal(m, b)
}
func (m *PayerData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PayerData.Marshal(b, m, deterministic)
}
func (dst *PayerData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PayerData.Merge(dst, src)
}
func (m *PayerData) XXX_Size() int {
	return xxx_messageInfo_PayerData.Size(m)
}
func (m *PayerData) XXX_DiscardUnknown() {
	xxx_messageInfo_PayerData.DiscardUnknown(m)
}

var xxx_messageInfo_PayerData proto.InternalMessageInfo

func (m *PayerData) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *PayerData) GetCountryCodeA2() string {
	if m != nil {
		return m.CountryCodeA2
	}
	return ""
}

func (m *PayerData) GetCountryName() *Name {
	if m != nil {
		return m.CountryName
	}
	return nil
}

func (m *PayerData) GetCity() *Name {
	if m != nil {
		return m.City
	}
	return nil
}

func (m *PayerData) GetSubdivision() string {
	if m != nil {
		return m.Subdivision
	}
	return ""
}

func (m *PayerData) GetTimezone() string {
	if m != nil {
		return m.Timezone
	}
	return ""
}

func (m *PayerData) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *PayerData) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

type OrderFee struct {
	AmountPaymentMethodCurrency float64  `protobuf:"fixed64,1,opt,name=AmountPaymentMethodCurrency,proto3" json:"AmountPaymentMethodCurrency,omitempty"`
	AmountMerchantCurrency      float64  `protobuf:"fixed64,2,opt,name=AmountMerchantCurrency,proto3" json:"AmountMerchantCurrency,omitempty"`
	XXX_NoUnkeyedLiteral        struct{} `json:"-"`
	XXX_unrecognized            []byte   `json:"-"`
	XXX_sizecache               int32    `json:"-"`
}

func (m *OrderFee) Reset()         { *m = OrderFee{} }
func (m *OrderFee) String() string { return proto.CompactTextString(m) }
func (*OrderFee) ProtoMessage()    {}
func (*OrderFee) Descriptor() ([]byte, []int) {
	return fileDescriptor_order_4c3532e487a64bbf, []int{1}
}
func (m *OrderFee) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrderFee.Unmarshal(m, b)
}
func (m *OrderFee) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrderFee.Marshal(b, m, deterministic)
}
func (dst *OrderFee) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderFee.Merge(dst, src)
}
func (m *OrderFee) XXX_Size() int {
	return xxx_messageInfo_OrderFee.Size(m)
}
func (m *OrderFee) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderFee.DiscardUnknown(m)
}

var xxx_messageInfo_OrderFee proto.InternalMessageInfo

func (m *OrderFee) GetAmountPaymentMethodCurrency() float64 {
	if m != nil {
		return m.AmountPaymentMethodCurrency
	}
	return 0
}

func (m *OrderFee) GetAmountMerchantCurrency() float64 {
	if m != nil {
		return m.AmountMerchantCurrency
	}
	return 0
}

type OrderFeePsp struct {
	AmountPaymentMethodCurrency float64  `protobuf:"fixed64,1,opt,name=AmountPaymentMethodCurrency,proto3" json:"AmountPaymentMethodCurrency,omitempty"`
	AmountMerchantCurrency      float64  `protobuf:"fixed64,2,opt,name=AmountMerchantCurrency,proto3" json:"AmountMerchantCurrency,omitempty"`
	AmountPspCurrency           float64  `protobuf:"fixed64,3,opt,name=AmountPspCurrency,proto3" json:"AmountPspCurrency,omitempty"`
	XXX_NoUnkeyedLiteral        struct{} `json:"-"`
	XXX_unrecognized            []byte   `json:"-"`
	XXX_sizecache               int32    `json:"-"`
}

func (m *OrderFeePsp) Reset()         { *m = OrderFeePsp{} }
func (m *OrderFeePsp) String() string { return proto.CompactTextString(m) }
func (*OrderFeePsp) ProtoMessage()    {}
func (*OrderFeePsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_order_4c3532e487a64bbf, []int{2}
}
func (m *OrderFeePsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrderFeePsp.Unmarshal(m, b)
}
func (m *OrderFeePsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrderFeePsp.Marshal(b, m, deterministic)
}
func (dst *OrderFeePsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderFeePsp.Merge(dst, src)
}
func (m *OrderFeePsp) XXX_Size() int {
	return xxx_messageInfo_OrderFeePsp.Size(m)
}
func (m *OrderFeePsp) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderFeePsp.DiscardUnknown(m)
}

var xxx_messageInfo_OrderFeePsp proto.InternalMessageInfo

func (m *OrderFeePsp) GetAmountPaymentMethodCurrency() float64 {
	if m != nil {
		return m.AmountPaymentMethodCurrency
	}
	return 0
}

func (m *OrderFeePsp) GetAmountMerchantCurrency() float64 {
	if m != nil {
		return m.AmountMerchantCurrency
	}
	return 0
}

func (m *OrderFeePsp) GetAmountPspCurrency() float64 {
	if m != nil {
		return m.AmountPspCurrency
	}
	return 0
}

// Contain information about payment system commission in other currencies
type OrderFeePaymentSystem struct {
	// amount of fee of payment system in payment currency
	AmountPaymentMethodCurrency float64  `protobuf:"fixed64,1,opt,name=AmountPaymentMethodCurrency,proto3" json:"AmountPaymentMethodCurrency,omitempty"`
	AmountMerchantCurrency      float64  `protobuf:"fixed64,2,opt,name=AmountMerchantCurrency,proto3" json:"AmountMerchantCurrency,omitempty"`
	AmountPaymentSystemCurrency float64  `protobuf:"fixed64,3,opt,name=AmountPaymentSystemCurrency,proto3" json:"AmountPaymentSystemCurrency,omitempty"`
	XXX_NoUnkeyedLiteral        struct{} `json:"-"`
	XXX_unrecognized            []byte   `json:"-"`
	XXX_sizecache               int32    `json:"-"`
}

func (m *OrderFeePaymentSystem) Reset()         { *m = OrderFeePaymentSystem{} }
func (m *OrderFeePaymentSystem) String() string { return proto.CompactTextString(m) }
func (*OrderFeePaymentSystem) ProtoMessage()    {}
func (*OrderFeePaymentSystem) Descriptor() ([]byte, []int) {
	return fileDescriptor_order_4c3532e487a64bbf, []int{3}
}
func (m *OrderFeePaymentSystem) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrderFeePaymentSystem.Unmarshal(m, b)
}
func (m *OrderFeePaymentSystem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrderFeePaymentSystem.Marshal(b, m, deterministic)
}
func (dst *OrderFeePaymentSystem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderFeePaymentSystem.Merge(dst, src)
}
func (m *OrderFeePaymentSystem) XXX_Size() int {
	return xxx_messageInfo_OrderFeePaymentSystem.Size(m)
}
func (m *OrderFeePaymentSystem) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderFeePaymentSystem.DiscardUnknown(m)
}

var xxx_messageInfo_OrderFeePaymentSystem proto.InternalMessageInfo

func (m *OrderFeePaymentSystem) GetAmountPaymentMethodCurrency() float64 {
	if m != nil {
		return m.AmountPaymentMethodCurrency
	}
	return 0
}

func (m *OrderFeePaymentSystem) GetAmountMerchantCurrency() float64 {
	if m != nil {
		return m.AmountMerchantCurrency
	}
	return 0
}

func (m *OrderFeePaymentSystem) GetAmountPaymentSystemCurrency() float64 {
	if m != nil {
		return m.AmountPaymentSystemCurrency
	}
	return 0
}

type Order struct {
	Id                                      string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Project                                 *ProjectOrder          `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	ProjectOrderId                          string                 `protobuf:"bytes,3,opt,name=project_order_id,json=projectOrderId,proto3" json:"project_order_id,omitempty"`
	ProjectAccount                          string                 `protobuf:"bytes,4,opt,name=project_account,json=projectAccount,proto3" json:"project_account,omitempty"`
	Description                             string                 `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	ProjectIncomeAmount                     float64                `protobuf:"fixed64,6,opt,name=project_income_amount,json=projectIncomeAmount,proto3" json:"project_income_amount,omitempty"`
	ProjectIncomeCurrency                   *Currency              `protobuf:"bytes,7,opt,name=project_income_currency,json=projectIncomeCurrency,proto3" json:"project_income_currency,omitempty"`
	ProjectOutcomeAmount                    float64                `protobuf:"fixed64,8,opt,name=project_outcome_amount,json=projectOutcomeAmount,proto3" json:"project_outcome_amount,omitempty"`
	ProjectOutcomeCurrency                  *Currency              `protobuf:"bytes,9,opt,name=Project_outcome_currency,json=ProjectOutcomeCurrency,proto3" json:"Project_outcome_currency,omitempty"`
	ProjectLastRequestedAt                  *timestamp.Timestamp   `protobuf:"bytes,10,opt,name=project_last_requested_at,json=projectLastRequestedAt,proto3" json:"project_last_requested_at,omitempty"`
	ProjectParams                           map[string]string      `protobuf:"bytes,11,rep,name=project_params,json=projectParams,proto3" json:"project_params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PayerData                               *PayerData             `protobuf:"bytes,12,opt,name=payer_data,json=payerData,proto3" json:"payer_data,omitempty"`
	PaymentMethod                           *PaymentMethodOrder    `protobuf:"bytes,13,opt,name=payment_method,json=paymentMethod,proto3" json:"payment_method,omitempty"`
	PaymentMethodTerminalId                 string                 `protobuf:"bytes,14,opt,name=payment_method_terminal_id,json=paymentMethodTerminalId,proto3" json:"payment_method_terminal_id,omitempty"`
	PaymentMethodOrderId                    string                 `protobuf:"bytes,15,opt,name=payment_method_orderId,json=paymentMethodOrderId,proto3" json:"payment_method_orderId,omitempty"`
	PaymentMethodOutcomeAmount              float64                `protobuf:"fixed64,16,opt,name=payment_method_outcome_amount,json=paymentMethodOutcomeAmount,proto3" json:"payment_method_outcome_amount,omitempty"`
	PaymentMethodOutcomeCurrency            *Currency              `protobuf:"bytes,17,opt,name=payment_method_outcome_currency,json=paymentMethodOutcomeCurrency,proto3" json:"payment_method_outcome_currency,omitempty"`
	PaymentMethodIncomeAmount               float64                `protobuf:"fixed64,18,opt,name=payment_method_income_amount,json=paymentMethodIncomeAmount,proto3" json:"payment_method_income_amount,omitempty"`
	PaymentMethodIncomeCurrency             *Currency              `protobuf:"bytes,19,opt,name=payment_method_income_currency,json=paymentMethodIncomeCurrency,proto3" json:"payment_method_income_currency,omitempty"`
	PaymentMethodIncomeCurrencyA3           string                 `protobuf:"bytes,20,opt,name=payment_method_income_currency_a3,json=paymentMethodIncomeCurrencyA3,proto3" json:"payment_method_income_currency_a3,omitempty"`
	PaymentMethodOrderClosedAt              *timestamp.Timestamp   `protobuf:"bytes,21,opt,name=payment_method_order_closed_at,json=paymentMethodOrderClosedAt,proto3" json:"payment_method_order_closed_at,omitempty"`
	Status                                  int32                  `protobuf:"varint,22,opt,name=status,proto3" json:"status,omitempty"`
	CreatedAt                               *timestamp.Timestamp   `protobuf:"bytes,23,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt                               *timestamp.Timestamp   `protobuf:"bytes,24,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	IsJsonRequest                           bool                   `protobuf:"varint,25,opt,name=is_json_request,json=isJsonRequest,proto3" json:"is_json_request,omitempty"`
	AmountInPspAccountingCurrency           float64                `protobuf:"fixed64,26,opt,name=amount_in_psp_accounting_currency,json=amountInPspAccountingCurrency,proto3" json:"amount_in_psp_accounting_currency,omitempty"`
	AmountInMerchantAccountingCurrency      float64                `protobuf:"fixed64,27,opt,name=amount_in_merchant_accounting_currency,json=amountInMerchantAccountingCurrency,proto3" json:"amount_in_merchant_accounting_currency,omitempty"`
	AmountOutMerchantAccountingCurrency     float64                `protobuf:"fixed64,28,opt,name=amount_out_merchant_accounting_currency,json=amountOutMerchantAccountingCurrency,proto3" json:"amount_out_merchant_accounting_currency,omitempty"`
	AmountInPaymentSystemAccountingCurrency float64                `protobuf:"fixed64,29,opt,name=amount_in_payment_system_accounting_currency,json=amountInPaymentSystemAccountingCurrency,proto3" json:"amount_in_payment_system_accounting_currency,omitempty"`
	PaymentMethodPayerAccount               string                 `protobuf:"bytes,30,opt,name=payment_method_payer_account,json=paymentMethodPayerAccount,proto3" json:"payment_method_payer_account,omitempty"`
	PaymentMethodTxnParams                  map[string]string      `protobuf:"bytes,31,rep,name=payment_method_txn_params,json=paymentMethodTxnParams,proto3" json:"payment_method_txn_params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	FixedPackage                            *FixedPackage          `protobuf:"bytes,32,opt,name=fixed_package,json=fixedPackage,proto3" json:"fixed_package,omitempty"`
	PaymentRequisites                       map[string]string      `protobuf:"bytes,33,rep,name=payment_requisites,json=paymentRequisites,proto3" json:"payment_requisites,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PspFeeAmount                            *OrderFeePsp           `protobuf:"bytes,34,opt,name=psp_fee_amount,json=pspFeeAmount,proto3" json:"psp_fee_amount,omitempty"`
	ProjectFeeAmount                        *OrderFee              `protobuf:"bytes,35,opt,name=project_fee_amount,json=projectFeeAmount,proto3" json:"project_fee_amount,omitempty"`
	ToPayerFeeAmount                        *OrderFee              `protobuf:"bytes,36,opt,name=to_payer_fee_amount,json=toPayerFeeAmount,proto3" json:"to_payer_fee_amount,omitempty"`
	VatAmount                               float64                `protobuf:"fixed64,37,opt,name=vat_amount,json=vatAmount,proto3" json:"vat_amount,omitempty"`
	PaymentSystemFeeAmount                  *OrderFeePaymentSystem `protobuf:"bytes,38,opt,name=payment_system_fee_amount,json=paymentSystemFeeAmount,proto3" json:"payment_system_fee_amount,omitempty"`
	XXX_NoUnkeyedLiteral                    struct{}               `json:"-"`
	XXX_unrecognized                        []byte                 `json:"-"`
	XXX_sizecache                           int32                  `json:"-"`
}

func (m *Order) Reset()         { *m = Order{} }
func (m *Order) String() string { return proto.CompactTextString(m) }
func (*Order) ProtoMessage()    {}
func (*Order) Descriptor() ([]byte, []int) {
	return fileDescriptor_order_4c3532e487a64bbf, []int{4}
}
func (m *Order) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Order.Unmarshal(m, b)
}
func (m *Order) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Order.Marshal(b, m, deterministic)
}
func (dst *Order) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Order.Merge(dst, src)
}
func (m *Order) XXX_Size() int {
	return xxx_messageInfo_Order.Size(m)
}
func (m *Order) XXX_DiscardUnknown() {
	xxx_messageInfo_Order.DiscardUnknown(m)
}

var xxx_messageInfo_Order proto.InternalMessageInfo

func (m *Order) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Order) GetProject() *ProjectOrder {
	if m != nil {
		return m.Project
	}
	return nil
}

func (m *Order) GetProjectOrderId() string {
	if m != nil {
		return m.ProjectOrderId
	}
	return ""
}

func (m *Order) GetProjectAccount() string {
	if m != nil {
		return m.ProjectAccount
	}
	return ""
}

func (m *Order) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Order) GetProjectIncomeAmount() float64 {
	if m != nil {
		return m.ProjectIncomeAmount
	}
	return 0
}

func (m *Order) GetProjectIncomeCurrency() *Currency {
	if m != nil {
		return m.ProjectIncomeCurrency
	}
	return nil
}

func (m *Order) GetProjectOutcomeAmount() float64 {
	if m != nil {
		return m.ProjectOutcomeAmount
	}
	return 0
}

func (m *Order) GetProjectOutcomeCurrency() *Currency {
	if m != nil {
		return m.ProjectOutcomeCurrency
	}
	return nil
}

func (m *Order) GetProjectLastRequestedAt() *timestamp.Timestamp {
	if m != nil {
		return m.ProjectLastRequestedAt
	}
	return nil
}

func (m *Order) GetProjectParams() map[string]string {
	if m != nil {
		return m.ProjectParams
	}
	return nil
}

func (m *Order) GetPayerData() *PayerData {
	if m != nil {
		return m.PayerData
	}
	return nil
}

func (m *Order) GetPaymentMethod() *PaymentMethodOrder {
	if m != nil {
		return m.PaymentMethod
	}
	return nil
}

func (m *Order) GetPaymentMethodTerminalId() string {
	if m != nil {
		return m.PaymentMethodTerminalId
	}
	return ""
}

func (m *Order) GetPaymentMethodOrderId() string {
	if m != nil {
		return m.PaymentMethodOrderId
	}
	return ""
}

func (m *Order) GetPaymentMethodOutcomeAmount() float64 {
	if m != nil {
		return m.PaymentMethodOutcomeAmount
	}
	return 0
}

func (m *Order) GetPaymentMethodOutcomeCurrency() *Currency {
	if m != nil {
		return m.PaymentMethodOutcomeCurrency
	}
	return nil
}

func (m *Order) GetPaymentMethodIncomeAmount() float64 {
	if m != nil {
		return m.PaymentMethodIncomeAmount
	}
	return 0
}

func (m *Order) GetPaymentMethodIncomeCurrency() *Currency {
	if m != nil {
		return m.PaymentMethodIncomeCurrency
	}
	return nil
}

func (m *Order) GetPaymentMethodIncomeCurrencyA3() string {
	if m != nil {
		return m.PaymentMethodIncomeCurrencyA3
	}
	return ""
}

func (m *Order) GetPaymentMethodOrderClosedAt() *timestamp.Timestamp {
	if m != nil {
		return m.PaymentMethodOrderClosedAt
	}
	return nil
}

func (m *Order) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *Order) GetCreatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Order) GetUpdatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *Order) GetIsJsonRequest() bool {
	if m != nil {
		return m.IsJsonRequest
	}
	return false
}

func (m *Order) GetAmountInPspAccountingCurrency() float64 {
	if m != nil {
		return m.AmountInPspAccountingCurrency
	}
	return 0
}

func (m *Order) GetAmountInMerchantAccountingCurrency() float64 {
	if m != nil {
		return m.AmountInMerchantAccountingCurrency
	}
	return 0
}

func (m *Order) GetAmountOutMerchantAccountingCurrency() float64 {
	if m != nil {
		return m.AmountOutMerchantAccountingCurrency
	}
	return 0
}

func (m *Order) GetAmountInPaymentSystemAccountingCurrency() float64 {
	if m != nil {
		return m.AmountInPaymentSystemAccountingCurrency
	}
	return 0
}

func (m *Order) GetPaymentMethodPayerAccount() string {
	if m != nil {
		return m.PaymentMethodPayerAccount
	}
	return ""
}

func (m *Order) GetPaymentMethodTxnParams() map[string]string {
	if m != nil {
		return m.PaymentMethodTxnParams
	}
	return nil
}

func (m *Order) GetFixedPackage() *FixedPackage {
	if m != nil {
		return m.FixedPackage
	}
	return nil
}

func (m *Order) GetPaymentRequisites() map[string]string {
	if m != nil {
		return m.PaymentRequisites
	}
	return nil
}

func (m *Order) GetPspFeeAmount() *OrderFeePsp {
	if m != nil {
		return m.PspFeeAmount
	}
	return nil
}

func (m *Order) GetProjectFeeAmount() *OrderFee {
	if m != nil {
		return m.ProjectFeeAmount
	}
	return nil
}

func (m *Order) GetToPayerFeeAmount() *OrderFee {
	if m != nil {
		return m.ToPayerFeeAmount
	}
	return nil
}

func (m *Order) GetVatAmount() float64 {
	if m != nil {
		return m.VatAmount
	}
	return 0
}

func (m *Order) GetPaymentSystemFeeAmount() *OrderFeePaymentSystem {
	if m != nil {
		return m.PaymentSystemFeeAmount
	}
	return nil
}

func init() {
	proto.RegisterType((*PayerData)(nil), "PayerData")
	proto.RegisterType((*OrderFee)(nil), "OrderFee")
	proto.RegisterType((*OrderFeePsp)(nil), "OrderFeePsp")
	proto.RegisterType((*OrderFeePaymentSystem)(nil), "OrderFeePaymentSystem")
	proto.RegisterType((*Order)(nil), "Order")
	proto.RegisterMapType((map[string]string)(nil), "Order.PaymentMethodTxnParamsEntry")
	proto.RegisterMapType((map[string]string)(nil), "Order.PaymentRequisitesEntry")
	proto.RegisterMapType((map[string]string)(nil), "Order.ProjectParamsEntry")
}

func init() { proto.RegisterFile("order.proto", fileDescriptor_order_4c3532e487a64bbf) }

var fileDescriptor_order_4c3532e487a64bbf = []byte{
	// 1182 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x57, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0x06, 0xed, 0x38, 0xb1, 0x46, 0x96, 0xe3, 0xac, 0x65, 0x85, 0x92, 0xa3, 0x44, 0x51, 0xda,
	0x44, 0x05, 0x02, 0x06, 0x90, 0x8b, 0x36, 0x4d, 0x0f, 0xb5, 0xe0, 0xd4, 0xa8, 0x8a, 0xfc, 0xa8,
	0xac, 0x7b, 0x4c, 0x89, 0x35, 0xb9, 0xb6, 0x99, 0x88, 0xe4, 0x96, 0xbb, 0x32, 0xac, 0xde, 0x0a,
	0xf4, 0x95, 0xfa, 0x24, 0x7d, 0x93, 0x3e, 0x41, 0xc1, 0xd9, 0x5d, 0x8a, 0x94, 0x14, 0x19, 0x39,
	0xe5, 0xa6, 0x9d, 0x99, 0xef, 0x9b, 0xd9, 0xf9, 0x5b, 0x0a, 0xaa, 0x49, 0x1a, 0xb0, 0xd4, 0xe1,
	0x69, 0x22, 0x93, 0x56, 0x9d, 0xd3, 0x69, 0xc4, 0x62, 0xe9, 0x45, 0x4c, 0x5e, 0x24, 0x81, 0x96,
	0xd6, 0x78, 0x9a, 0xbc, 0x67, 0xbe, 0xd4, 0xc7, 0x9d, 0x20, 0xf4, 0x65, 0x98, 0xc4, 0x34, 0x9d,
	0x6a, 0xc9, 0x83, 0xf3, 0x24, 0x39, 0x1f, 0xb3, 0x67, 0x78, 0x3a, 0x9d, 0x9c, 0x3d, 0x93, 0x61,
	0xc4, 0x84, 0xa4, 0x11, 0x57, 0x06, 0xdd, 0xff, 0x2c, 0xa8, 0x8c, 0xe8, 0x94, 0xa5, 0x2f, 0xa9,
	0xa4, 0x64, 0x1b, 0xd6, 0x42, 0x6e, 0x5b, 0x1d, 0xab, 0x57, 0x71, 0xd7, 0x42, 0x4e, 0x1e, 0xc3,
	0x6d, 0x3f, 0x99, 0xc4, 0x32, 0x9d, 0x7a, 0x7e, 0x12, 0x30, 0x8f, 0xf6, 0xed, 0x35, 0x54, 0xd6,
	0xb4, 0xf8, 0x28, 0x09, 0xd8, 0xa0, 0x4f, 0x7a, 0xb0, 0x65, 0xec, 0x62, 0x1a, 0x31, 0x7b, 0xbd,
	0x63, 0xf5, 0xaa, 0xfd, 0x0d, 0xe7, 0x0d, 0x8d, 0x98, 0x5b, 0xd5, 0xaa, 0xec, 0x40, 0x9a, 0x70,
	0xc3, 0x0f, 0xe5, 0xd4, 0xbe, 0x51, 0xb4, 0x40, 0x11, 0xe9, 0x40, 0x55, 0x4c, 0x4e, 0x83, 0xf0,
	0x32, 0x14, 0x61, 0x12, 0xdb, 0x1b, 0xe8, 0xa8, 0x28, 0x22, 0x2d, 0xd8, 0xcc, 0xe2, 0xff, 0x33,
	0x89, 0x99, 0x7d, 0x13, 0xd5, 0xf9, 0x99, 0xd4, 0x61, 0x83, 0x5f, 0x64, 0x8a, 0x5b, 0xa8, 0x50,
	0x87, 0x4c, 0xca, 0x22, 0x1a, 0x8e, 0xed, 0x4d, 0x25, 0xc5, 0x43, 0xf7, 0x6f, 0x0b, 0x36, 0xdf,
	0x66, 0xc9, 0x3d, 0x66, 0x8c, 0x1c, 0xc2, 0xfe, 0x20, 0xca, 0x22, 0x1c, 0xa9, 0x0c, 0xbf, 0xc6,
	0x04, 0x1f, 0x4d, 0xd2, 0x94, 0xc5, 0xfe, 0x14, 0x93, 0x61, 0xb9, 0xab, 0x4c, 0xc8, 0x37, 0xd0,
	0x50, 0xea, 0xd7, 0x2c, 0xf5, 0x2f, 0x68, 0x2c, 0x73, 0xf0, 0x1a, 0x82, 0x3f, 0xa2, 0xed, 0xfe,
	0x63, 0x41, 0xd5, 0x84, 0x31, 0x12, 0xfc, 0xf3, 0x45, 0x42, 0x9e, 0xc2, 0x1d, 0x4d, 0x2b, 0x78,
	0x0e, 0x59, 0x47, 0xc8, 0xa2, 0xa2, 0xfb, 0xaf, 0x05, 0x7b, 0x79, 0xdc, 0x2a, 0x8e, 0x5f, 0xa7,
	0x42, 0xb2, 0xe8, 0x33, 0xde, 0x60, 0xde, 0xb3, 0x0a, 0x68, 0xee, 0x2e, 0xab, 0x4c, 0xba, 0x7f,
	0xd5, 0x61, 0x03, 0x6f, 0x85, 0x53, 0x10, 0xe4, 0x53, 0x10, 0x90, 0x27, 0x70, 0x4b, 0xcf, 0x19,
	0x06, 0x51, 0xed, 0xd7, 0x9c, 0x91, 0x3a, 0xa3, 0xbd, 0x6b, 0xb4, 0xa4, 0x07, 0x3b, 0xfa, 0xa7,
	0x87, 0xb3, 0xeb, 0x85, 0x01, 0x7a, 0xae, 0xb8, 0xdb, 0xbc, 0x00, 0x18, 0x66, 0x94, 0xb7, 0x8d,
	0x25, 0xf5, 0x71, 0x3e, 0x70, 0x22, 0x66, 0x86, 0x03, 0x25, 0xcd, 0x86, 0x22, 0x60, 0xc2, 0x4f,
	0x43, 0x2e, 0x0b, 0x43, 0x51, 0x10, 0x91, 0x3e, 0xec, 0x19, 0xaa, 0x30, 0xf6, 0x93, 0x88, 0x79,
	0x14, 0x6f, 0x89, 0x13, 0x62, 0xb9, 0xbb, 0x5a, 0x39, 0x44, 0x9d, 0x4a, 0x00, 0x19, 0xc0, 0xdd,
	0x39, 0x8c, 0x6f, 0x32, 0x75, 0x0b, 0x6f, 0x58, 0x71, 0x4c, 0x5e, 0xdc, 0xbd, 0x12, 0x41, 0x9e,
	0xf0, 0xaf, 0xa1, 0x91, 0xdf, 0x75, 0x22, 0x8b, 0x7e, 0x37, 0xd1, 0x6f, 0xdd, 0xdc, 0x58, 0x29,
	0xb5, 0xe3, 0x23, 0xb0, 0x47, 0x73, 0xa8, 0xdc, 0x73, 0x65, 0xde, 0x73, 0x63, 0x54, 0xa2, 0xc8,
	0x5d, 0xff, 0x06, 0x4d, 0xe3, 0x7a, 0x4c, 0x85, 0xf4, 0x52, 0xf6, 0xc7, 0x84, 0x09, 0xc9, 0x02,
	0x8f, 0x4a, 0x1b, 0x90, 0xa5, 0xe5, 0xa8, 0xc5, 0xe7, 0x98, 0xc5, 0xe7, 0x9c, 0x98, 0xc5, 0xe7,
	0x9a, 0xb8, 0x5f, 0x51, 0x21, 0x5d, 0x03, 0x1d, 0x48, 0x72, 0x08, 0x26, 0xf9, 0x1e, 0xa7, 0x29,
	0x8d, 0x84, 0x5d, 0xed, 0xac, 0xf7, 0xaa, 0xfd, 0xa6, 0x83, 0x55, 0x33, 0x35, 0x1f, 0xa1, 0xee,
	0xc7, 0x6c, 0xa3, 0xb9, 0x66, 0xff, 0x2a, 0x19, 0xf9, 0x0a, 0x80, 0x67, 0xbb, 0xd4, 0x0b, 0xa8,
	0xa4, 0xf6, 0x16, 0x46, 0x02, 0x4e, 0xbe, 0x5e, 0xdd, 0x0a, 0xcf, 0x37, 0xed, 0x0b, 0xd8, 0x2e,
	0x6f, 0x74, 0xbb, 0x86, 0xe6, 0xbb, 0x4e, 0x69, 0x2e, 0x54, 0x83, 0xd5, 0x78, 0x51, 0x46, 0xbe,
	0x87, 0x56, 0x19, 0xeb, 0x49, 0x96, 0x46, 0x61, 0x4c, 0xc7, 0x59, 0xc3, 0x6d, 0x63, 0x8b, 0xdc,
	0x2d, 0x41, 0x4e, 0xb4, 0x7e, 0x18, 0x60, 0xdd, 0xca, 0xe0, 0x44, 0xf5, 0xa4, 0x7d, 0x1b, 0x81,
	0x75, 0xbe, 0xe0, 0x7f, 0x18, 0x90, 0x01, 0xb4, 0xe7, 0x51, 0xe5, 0xa2, 0xef, 0x60, 0xd1, 0x5b,
	0x65, 0x70, 0xa9, 0xf4, 0x23, 0x78, 0xf0, 0x11, 0x8a, 0xbc, 0x03, 0xee, 0xcc, 0x77, 0xc0, 0xbd,
	0x65, 0x7c, 0x79, 0x1f, 0xfc, 0x00, 0xf7, 0xe6, 0x18, 0xcb, 0x03, 0x40, 0x30, 0xa6, 0x66, 0x89,
	0xa3, 0x34, 0x06, 0x6f, 0xe0, 0xfe, 0x72, 0x82, 0x3c, 0xa2, 0xdd, 0xf9, 0x88, 0xf6, 0x97, 0xb0,
	0xe5, 0x01, 0xfd, 0x04, 0x0f, 0x57, 0xf3, 0x79, 0xf4, 0xc0, 0xae, 0x63, 0x9a, 0xdb, 0x2b, 0x78,
	0x06, 0x07, 0xe4, 0xf7, 0x85, 0xc8, 0xd4, 0x42, 0xf1, 0xc7, 0x89, 0x50, 0x7d, 0xbe, 0x77, 0x6d,
	0x9f, 0xb7, 0x16, 0x2b, 0x79, 0x84, 0xf0, 0x81, 0x24, 0x0d, 0xb8, 0x29, 0x24, 0x95, 0x13, 0x61,
	0x37, 0x3a, 0x56, 0x6f, 0xc3, 0xd5, 0x27, 0xf2, 0x1d, 0x80, 0x9f, 0x32, 0xaa, 0x67, 0xe9, 0xee,
	0xb5, 0x3e, 0x2a, 0xda, 0x7a, 0x20, 0x33, 0xe8, 0x84, 0x07, 0x06, 0x6a, 0x5f, 0x0f, 0xd5, 0xd6,
	0x03, 0x99, 0x7d, 0x66, 0x84, 0xc2, 0x7b, 0x2f, 0x92, 0xd8, 0xcc, 0xb2, 0xdd, 0xec, 0x58, 0xbd,
	0x4d, 0xb7, 0x16, 0x8a, 0x9f, 0x45, 0x12, 0xeb, 0x29, 0xcd, 0xf2, 0xab, 0x4a, 0xeb, 0x85, 0xb1,
	0xc7, 0x05, 0x37, 0xbb, 0x33, 0x8c, 0xcf, 0x67, 0x25, 0x6b, 0x61, 0xd5, 0xdb, 0xca, 0x70, 0x18,
	0x8f, 0x04, 0x1f, 0xe4, 0x56, 0x79, 0xa5, 0x5c, 0x78, 0x3c, 0x63, 0x8a, 0xf4, 0x63, 0xb2, 0x94,
	0x6e, 0x1f, 0xe9, 0xba, 0x86, 0xce, 0x3c, 0x3c, 0x4b, 0x38, 0x4f, 0xe0, 0x89, 0xe6, 0x4c, 0x26,
	0x72, 0x35, 0xe9, 0x3d, 0x24, 0x7d, 0xa4, 0xcc, 0xdf, 0x4e, 0xe4, 0x0a, 0xd6, 0x77, 0xf0, 0xb4,
	0x70, 0x67, 0xdd, 0x13, 0x02, 0x9f, 0xae, 0xa5, 0xd4, 0x6d, 0xa4, 0x7e, 0x92, 0x5f, 0xbf, 0xf8,
	0xd6, 0x2d, 0xa1, 0x5f, 0x9c, 0x21, 0xb5, 0xc1, 0xcc, 0xab, 0x74, 0x1f, 0xbb, 0xb5, 0x3c, 0x43,
	0xb8, 0xd0, 0xcc, 0x03, 0xf5, 0x0e, 0x9a, 0xf3, 0xcb, 0xe8, 0x2a, 0x36, 0x0b, 0xf4, 0x01, 0x2e,
	0xd0, 0xae, 0x59, 0xa0, 0xa5, 0x95, 0x74, 0x15, 0x17, 0x37, 0x69, 0x83, 0x2f, 0x55, 0x92, 0x3e,
	0xd4, 0xce, 0xc2, 0x2b, 0x96, 0x85, 0xe5, 0x7f, 0xa0, 0xe7, 0xcc, 0xee, 0xe8, 0x17, 0xf8, 0x38,
	0x93, 0x8e, 0x94, 0xd0, 0xdd, 0x3a, 0x2b, 0x9c, 0xc8, 0x2b, 0x20, 0x26, 0xa4, 0xac, 0x9d, 0x42,
	0x11, 0x4a, 0x26, 0xec, 0x87, 0x18, 0x4b, 0xbb, 0x1c, 0x8b, 0x9b, 0xeb, 0x55, 0x18, 0x77, 0xf8,
	0xbc, 0x9c, 0xf4, 0x61, 0x3b, 0x6b, 0xb5, 0x33, 0x96, 0xef, 0x95, 0x2e, 0x86, 0xb0, 0xe5, 0x14,
	0xbe, 0xdd, 0xdc, 0x2d, 0x2e, 0xf8, 0x31, 0x33, 0x8b, 0xe5, 0x5b, 0x20, 0xe6, 0x29, 0x29, 0xe0,
	0x1e, 0xe9, 0x65, 0x62, 0x70, 0xae, 0xf9, 0x5a, 0x98, 0x01, 0x9f, 0xc3, 0xae, 0x4c, 0x74, 0x09,
	0x0a, 0xc8, 0x2f, 0x16, 0x90, 0x32, 0xc1, 0x2a, 0xcc, 0x90, 0x6d, 0x80, 0x4b, 0x2a, 0x0d, 0xe0,
	0x4b, 0xec, 0x82, 0xca, 0x25, 0x95, 0x5a, 0xfd, 0xcb, 0xac, 0x4c, 0xba, 0x79, 0x0a, 0xf4, 0x8f,
	0x91, 0xbe, 0xe1, 0x2c, 0xfd, 0xa8, 0xcb, 0x4b, 0xa3, 0x8e, 0xb9, 0xc7, 0xd6, 0x21, 0x90, 0xc5,
	0x27, 0x91, 0xec, 0xc0, 0xfa, 0x07, 0x36, 0xd5, 0x5f, 0x4f, 0xd9, 0xcf, 0xec, 0x1b, 0xfc, 0x92,
	0x8e, 0x27, 0x4c, 0xff, 0x75, 0x50, 0x87, 0x17, 0x6b, 0xcf, 0xad, 0xd6, 0x10, 0xf6, 0x57, 0xf4,
	0xc4, 0x27, 0x51, 0xbd, 0x84, 0xc6, 0xf2, 0x92, 0x7e, 0x0a, 0xcb, 0xe9, 0x4d, 0xdc, 0x53, 0x07,
	0xff, 0x07, 0x00, 0x00, 0xff, 0xff, 0x44, 0x54, 0x90, 0x80, 0x7b, 0x0d, 0x00, 0x00,
}
