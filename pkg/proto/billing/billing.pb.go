// Code generated by protoc-gen-go. DO NOT EDIT.
// source: billing/billing.proto

package billing // import "github.com/ProtocolONE/payone-repository/pkg/proto/billing"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import timestamp "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AccountingPeriod int32

const (
	AccountingPeriod_day       AccountingPeriod = 0
	AccountingPeriod_week      AccountingPeriod = 1
	AccountingPeriod_two_week  AccountingPeriod = 2
	AccountingPeriod_month     AccountingPeriod = 3
	AccountingPeriod_quarter   AccountingPeriod = 4
	AccountingPeriod_half_year AccountingPeriod = 5
	AccountingPeriod_year      AccountingPeriod = 6
)

var AccountingPeriod_name = map[int32]string{
	0: "day",
	1: "week",
	2: "two_week",
	3: "month",
	4: "quarter",
	5: "half_year",
	6: "year",
}
var AccountingPeriod_value = map[string]int32{
	"day":       0,
	"week":      1,
	"two_week":  2,
	"month":     3,
	"quarter":   4,
	"half_year": 5,
	"year":      6,
}

func (x AccountingPeriod) String() string {
	return proto.EnumName(AccountingPeriod_name, int32(x))
}
func (AccountingPeriod) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_billing_df375f159918e01c, []int{0}
}

type Name struct {
	En                   string   `protobuf:"bytes,1,opt,name=en,proto3" json:"en,omitempty"`
	Ru                   string   `protobuf:"bytes,2,opt,name=ru,proto3" json:"ru,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Name) Reset()         { *m = Name{} }
func (m *Name) String() string { return proto.CompactTextString(m) }
func (*Name) ProtoMessage()    {}
func (*Name) Descriptor() ([]byte, []int) {
	return fileDescriptor_billing_df375f159918e01c, []int{0}
}
func (m *Name) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Name.Unmarshal(m, b)
}
func (m *Name) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Name.Marshal(b, m, deterministic)
}
func (dst *Name) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Name.Merge(dst, src)
}
func (m *Name) XXX_Size() int {
	return xxx_messageInfo_Name.Size(m)
}
func (m *Name) XXX_DiscardUnknown() {
	xxx_messageInfo_Name.DiscardUnknown(m)
}

var xxx_messageInfo_Name proto.InternalMessageInfo

func (m *Name) GetEn() string {
	if m != nil {
		return m.En
	}
	return ""
}

func (m *Name) GetRu() string {
	if m != nil {
		return m.Ru
	}
	return ""
}

type Country struct {
	CodeInt              int32                `protobuf:"varint,1,opt,name=code_int,json=codeInt,proto3" json:"code_int,omitempty"`
	CodeA2               string               `protobuf:"bytes,2,opt,name=code_a2,json=codeA2,proto3" json:"code_a2,omitempty"`
	CodeA3               string               `protobuf:"bytes,3,opt,name=code_a3,json=codeA3,proto3" json:"code_a3,omitempty"`
	Name                 *Name                `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	IsActive             bool                 `protobuf:"varint,5,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	CreatedAt            *timestamp.Timestamp `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            *timestamp.Timestamp `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Country) Reset()         { *m = Country{} }
func (m *Country) String() string { return proto.CompactTextString(m) }
func (*Country) ProtoMessage()    {}
func (*Country) Descriptor() ([]byte, []int) {
	return fileDescriptor_billing_df375f159918e01c, []int{1}
}
func (m *Country) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Country.Unmarshal(m, b)
}
func (m *Country) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Country.Marshal(b, m, deterministic)
}
func (dst *Country) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Country.Merge(dst, src)
}
func (m *Country) XXX_Size() int {
	return xxx_messageInfo_Country.Size(m)
}
func (m *Country) XXX_DiscardUnknown() {
	xxx_messageInfo_Country.DiscardUnknown(m)
}

var xxx_messageInfo_Country proto.InternalMessageInfo

func (m *Country) GetCodeInt() int32 {
	if m != nil {
		return m.CodeInt
	}
	return 0
}

func (m *Country) GetCodeA2() string {
	if m != nil {
		return m.CodeA2
	}
	return ""
}

func (m *Country) GetCodeA3() string {
	if m != nil {
		return m.CodeA3
	}
	return ""
}

func (m *Country) GetName() *Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *Country) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

func (m *Country) GetCreatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Country) GetUpdatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

type Currency struct {
	CodeInt              int32                `protobuf:"varint,1,opt,name=code_int,json=codeInt,proto3" json:"code_int,omitempty"`
	CodeA3               string               `protobuf:"bytes,2,opt,name=code_a3,json=codeA3,proto3" json:"code_a3,omitempty"`
	Name                 *Name                `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	IsActive             bool                 `protobuf:"varint,5,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	CreatedAt            *timestamp.Timestamp `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            *timestamp.Timestamp `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Currency) Reset()         { *m = Currency{} }
func (m *Currency) String() string { return proto.CompactTextString(m) }
func (*Currency) ProtoMessage()    {}
func (*Currency) Descriptor() ([]byte, []int) {
	return fileDescriptor_billing_df375f159918e01c, []int{2}
}
func (m *Currency) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Currency.Unmarshal(m, b)
}
func (m *Currency) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Currency.Marshal(b, m, deterministic)
}
func (dst *Currency) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Currency.Merge(dst, src)
}
func (m *Currency) XXX_Size() int {
	return xxx_messageInfo_Currency.Size(m)
}
func (m *Currency) XXX_DiscardUnknown() {
	xxx_messageInfo_Currency.DiscardUnknown(m)
}

var xxx_messageInfo_Currency proto.InternalMessageInfo

func (m *Currency) GetCodeInt() int32 {
	if m != nil {
		return m.CodeInt
	}
	return 0
}

func (m *Currency) GetCodeA3() string {
	if m != nil {
		return m.CodeA3
	}
	return ""
}

func (m *Currency) GetName() *Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *Currency) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

func (m *Currency) GetCreatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Currency) GetUpdatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

type Merchant struct {
	Id                        string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ExternalId                string               `protobuf:"bytes,2,opt,name=external_id,json=externalId,proto3" json:"external_id,omitempty"`
	Email                     string               `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	Name                      string               `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Country                   *Country             `protobuf:"bytes,5,opt,name=country,proto3" json:"country,omitempty"`
	AccountingPeriod          AccountingPeriod     `protobuf:"varint,6,opt,name=accounting_period,json=accountingPeriod,proto3,enum=billing.AccountingPeriod" json:"accounting_period,omitempty"`
	Currency                  *Currency            `protobuf:"bytes,7,opt,name=currency,proto3" json:"currency,omitempty"`
	IsVatEnabled              bool                 `protobuf:"varint,8,opt,name=is_vat_enabled,json=isVatEnabled,proto3" json:"is_vat_enabled,omitempty"`
	IsCommissionToUserEnabled bool                 `protobuf:"varint,9,opt,name=is_commission_to_user_enabled,json=isCommissionToUserEnabled,proto3" json:"is_commission_to_user_enabled,omitempty"`
	Status                    int32                `protobuf:"varint,10,opt,name=status,proto3" json:"status,omitempty"`
	CreatedAt                 *timestamp.Timestamp `protobuf:"bytes,11,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt                 *timestamp.Timestamp `protobuf:"bytes,12,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	XXX_NoUnkeyedLiteral      struct{}             `json:"-"`
	XXX_unrecognized          []byte               `json:"-"`
	XXX_sizecache             int32                `json:"-"`
}

func (m *Merchant) Reset()         { *m = Merchant{} }
func (m *Merchant) String() string { return proto.CompactTextString(m) }
func (*Merchant) ProtoMessage()    {}
func (*Merchant) Descriptor() ([]byte, []int) {
	return fileDescriptor_billing_df375f159918e01c, []int{3}
}
func (m *Merchant) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Merchant.Unmarshal(m, b)
}
func (m *Merchant) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Merchant.Marshal(b, m, deterministic)
}
func (dst *Merchant) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Merchant.Merge(dst, src)
}
func (m *Merchant) XXX_Size() int {
	return xxx_messageInfo_Merchant.Size(m)
}
func (m *Merchant) XXX_DiscardUnknown() {
	xxx_messageInfo_Merchant.DiscardUnknown(m)
}

var xxx_messageInfo_Merchant proto.InternalMessageInfo

func (m *Merchant) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Merchant) GetExternalId() string {
	if m != nil {
		return m.ExternalId
	}
	return ""
}

func (m *Merchant) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *Merchant) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Merchant) GetCountry() *Country {
	if m != nil {
		return m.Country
	}
	return nil
}

func (m *Merchant) GetAccountingPeriod() AccountingPeriod {
	if m != nil {
		return m.AccountingPeriod
	}
	return AccountingPeriod_day
}

func (m *Merchant) GetCurrency() *Currency {
	if m != nil {
		return m.Currency
	}
	return nil
}

func (m *Merchant) GetIsVatEnabled() bool {
	if m != nil {
		return m.IsVatEnabled
	}
	return false
}

func (m *Merchant) GetIsCommissionToUserEnabled() bool {
	if m != nil {
		return m.IsCommissionToUserEnabled
	}
	return false
}

func (m *Merchant) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *Merchant) GetCreatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Merchant) GetUpdatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

type FixedPackage struct {
	Id                   string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string               `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	CurrencyInt          int32                `protobuf:"varint,3,opt,name=currency_int,json=currencyInt,proto3" json:"currency_int,omitempty"`
	Price                float64              `protobuf:"fixed64,4,opt,name=price,proto3" json:"price,omitempty"`
	IsActive             bool                 `protobuf:"varint,5,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	CreatedAt            *timestamp.Timestamp `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            *timestamp.Timestamp `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Currency             *Currency            `protobuf:"bytes,8,opt,name=currency,proto3" json:"currency,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *FixedPackage) Reset()         { *m = FixedPackage{} }
func (m *FixedPackage) String() string { return proto.CompactTextString(m) }
func (*FixedPackage) ProtoMessage()    {}
func (*FixedPackage) Descriptor() ([]byte, []int) {
	return fileDescriptor_billing_df375f159918e01c, []int{4}
}
func (m *FixedPackage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FixedPackage.Unmarshal(m, b)
}
func (m *FixedPackage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FixedPackage.Marshal(b, m, deterministic)
}
func (dst *FixedPackage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FixedPackage.Merge(dst, src)
}
func (m *FixedPackage) XXX_Size() int {
	return xxx_messageInfo_FixedPackage.Size(m)
}
func (m *FixedPackage) XXX_DiscardUnknown() {
	xxx_messageInfo_FixedPackage.DiscardUnknown(m)
}

var xxx_messageInfo_FixedPackage proto.InternalMessageInfo

func (m *FixedPackage) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *FixedPackage) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FixedPackage) GetCurrencyInt() int32 {
	if m != nil {
		return m.CurrencyInt
	}
	return 0
}

func (m *FixedPackage) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *FixedPackage) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

func (m *FixedPackage) GetCreatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *FixedPackage) GetUpdatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *FixedPackage) GetCurrency() *Currency {
	if m != nil {
		return m.Currency
	}
	return nil
}

type FixedPackages struct {
	FixedPackage         []*FixedPackage `protobuf:"bytes,1,rep,name=fixed_package,json=fixedPackage,proto3" json:"fixed_package,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *FixedPackages) Reset()         { *m = FixedPackages{} }
func (m *FixedPackages) String() string { return proto.CompactTextString(m) }
func (*FixedPackages) ProtoMessage()    {}
func (*FixedPackages) Descriptor() ([]byte, []int) {
	return fileDescriptor_billing_df375f159918e01c, []int{5}
}
func (m *FixedPackages) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FixedPackages.Unmarshal(m, b)
}
func (m *FixedPackages) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FixedPackages.Marshal(b, m, deterministic)
}
func (dst *FixedPackages) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FixedPackages.Merge(dst, src)
}
func (m *FixedPackages) XXX_Size() int {
	return xxx_messageInfo_FixedPackages.Size(m)
}
func (m *FixedPackages) XXX_DiscardUnknown() {
	xxx_messageInfo_FixedPackages.DiscardUnknown(m)
}

var xxx_messageInfo_FixedPackages proto.InternalMessageInfo

func (m *FixedPackages) GetFixedPackage() []*FixedPackage {
	if m != nil {
		return m.FixedPackage
	}
	return nil
}

type ProjectPaymentMethod struct {
	Id                   string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	AddedAAt             *timestamp.Timestamp `protobuf:"bytes,2,opt,name=added_aAt,json=addedAAt,proto3" json:"added_aAt,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ProjectPaymentMethod) Reset()         { *m = ProjectPaymentMethod{} }
func (m *ProjectPaymentMethod) String() string { return proto.CompactTextString(m) }
func (*ProjectPaymentMethod) ProtoMessage()    {}
func (*ProjectPaymentMethod) Descriptor() ([]byte, []int) {
	return fileDescriptor_billing_df375f159918e01c, []int{6}
}
func (m *ProjectPaymentMethod) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProjectPaymentMethod.Unmarshal(m, b)
}
func (m *ProjectPaymentMethod) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProjectPaymentMethod.Marshal(b, m, deterministic)
}
func (dst *ProjectPaymentMethod) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProjectPaymentMethod.Merge(dst, src)
}
func (m *ProjectPaymentMethod) XXX_Size() int {
	return xxx_messageInfo_ProjectPaymentMethod.Size(m)
}
func (m *ProjectPaymentMethod) XXX_DiscardUnknown() {
	xxx_messageInfo_ProjectPaymentMethod.DiscardUnknown(m)
}

var xxx_messageInfo_ProjectPaymentMethod proto.InternalMessageInfo

func (m *ProjectPaymentMethod) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ProjectPaymentMethod) GetAddedAAt() *timestamp.Timestamp {
	if m != nil {
		return m.AddedAAt
	}
	return nil
}

type ProjectPaymentMethods struct {
	PaymentMethods       []*ProjectPaymentMethod `protobuf:"bytes,1,rep,name=payment_methods,json=paymentMethods,proto3" json:"payment_methods,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *ProjectPaymentMethods) Reset()         { *m = ProjectPaymentMethods{} }
func (m *ProjectPaymentMethods) String() string { return proto.CompactTextString(m) }
func (*ProjectPaymentMethods) ProtoMessage()    {}
func (*ProjectPaymentMethods) Descriptor() ([]byte, []int) {
	return fileDescriptor_billing_df375f159918e01c, []int{7}
}
func (m *ProjectPaymentMethods) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProjectPaymentMethods.Unmarshal(m, b)
}
func (m *ProjectPaymentMethods) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProjectPaymentMethods.Marshal(b, m, deterministic)
}
func (dst *ProjectPaymentMethods) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProjectPaymentMethods.Merge(dst, src)
}
func (m *ProjectPaymentMethods) XXX_Size() int {
	return xxx_messageInfo_ProjectPaymentMethods.Size(m)
}
func (m *ProjectPaymentMethods) XXX_DiscardUnknown() {
	xxx_messageInfo_ProjectPaymentMethods.DiscardUnknown(m)
}

var xxx_messageInfo_ProjectPaymentMethods proto.InternalMessageInfo

func (m *ProjectPaymentMethods) GetPaymentMethods() []*ProjectPaymentMethod {
	if m != nil {
		return m.PaymentMethods
	}
	return nil
}

type Project struct {
	Id                         string                            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CallbackCurrency           *Currency                         `protobuf:"bytes,2,opt,name=callback_currency,json=callbackCurrency,proto3" json:"callback_currency,omitempty"`
	CallbackProtocol           string                            `protobuf:"bytes,3,opt,name=callback_protocol,json=callbackProtocol,proto3" json:"callback_protocol,omitempty"`
	CreateInvoiceAllowedUrls   []string                          `protobuf:"bytes,4,rep,name=create_invoice_allowed_urls,json=createInvoiceAllowedUrls,proto3" json:"create_invoice_allowed_urls,omitempty"`
	Merchant                   *Merchant                         `protobuf:"bytes,5,opt,name=merchant,proto3" json:"merchant,omitempty"`
	IsAllowDynamicNotifyUrls   bool                              `protobuf:"varint,6,opt,name=is_allow_dynamic_notify_urls,json=isAllowDynamicNotifyUrls,proto3" json:"is_allow_dynamic_notify_urls,omitempty"`
	IsAllowDynamicRedirectUrls bool                              `protobuf:"varint,7,opt,name=is_allow_dynamic_redirect_urls,json=isAllowDynamicRedirectUrls,proto3" json:"is_allow_dynamic_redirect_urls,omitempty"`
	LimitsCurrency             *Currency                         `protobuf:"bytes,8,opt,name=limits_currency,json=limitsCurrency,proto3" json:"limits_currency,omitempty"`
	MaxPaymentAmount           float64                           `protobuf:"fixed64,9,opt,name=MaxPaymentAmount,proto3" json:"MaxPaymentAmount,omitempty"`
	MinPaymentAmount           float64                           `protobuf:"fixed64,10,opt,name=MinPaymentAmount,proto3" json:"MinPaymentAmount,omitempty"`
	Name                       string                            `protobuf:"bytes,11,opt,name=Name,proto3" json:"Name,omitempty"`
	NotifyEmails               []string                          `protobuf:"bytes,12,rep,name=NotifyEmails,proto3" json:"NotifyEmails,omitempty"`
	OnlyFixedAmounts           bool                              `protobuf:"varint,13,opt,name=OnlyFixedAmounts,proto3" json:"OnlyFixedAmounts,omitempty"`
	SecretKey                  string                            `protobuf:"bytes,14,opt,name=SecretKey,proto3" json:"SecretKey,omitempty"`
	SendNotifyEmail            bool                              `protobuf:"varint,15,opt,name=SendNotifyEmail,proto3" json:"SendNotifyEmail,omitempty"`
	URLCheckAccount            string                            `protobuf:"bytes,16,opt,name=URLCheckAccount,proto3" json:"URLCheckAccount,omitempty"`
	URLProcessPayment          string                            `protobuf:"bytes,17,opt,name=URLProcessPayment,proto3" json:"URLProcessPayment,omitempty"`
	URLRedirectFail            string                            `protobuf:"bytes,18,opt,name=URLRedirectFail,proto3" json:"URLRedirectFail,omitempty"`
	URLRedirectSuccess         string                            `protobuf:"bytes,19,opt,name=URLRedirectSuccess,proto3" json:"URLRedirectSuccess,omitempty"`
	FixedPackage               map[string]*FixedPackages         `protobuf:"bytes,23,rep,name=fixed_package,json=fixedPackage,proto3" json:"fixed_package,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PaymentMethods             map[string]*ProjectPaymentMethods `protobuf:"bytes,24,rep,name=payment_methods,json=paymentMethods,proto3" json:"payment_methods,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	IsActive                   bool                              `protobuf:"varint,20,opt,name=IsActive,proto3" json:"IsActive,omitempty"`
	CreatedAt                  *timestamp.Timestamp              `protobuf:"bytes,21,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt                  *timestamp.Timestamp              `protobuf:"bytes,22,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	XXX_NoUnkeyedLiteral       struct{}                          `json:"-"`
	XXX_unrecognized           []byte                            `json:"-"`
	XXX_sizecache              int32                             `json:"-"`
}

func (m *Project) Reset()         { *m = Project{} }
func (m *Project) String() string { return proto.CompactTextString(m) }
func (*Project) ProtoMessage()    {}
func (*Project) Descriptor() ([]byte, []int) {
	return fileDescriptor_billing_df375f159918e01c, []int{8}
}
func (m *Project) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Project.Unmarshal(m, b)
}
func (m *Project) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Project.Marshal(b, m, deterministic)
}
func (dst *Project) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Project.Merge(dst, src)
}
func (m *Project) XXX_Size() int {
	return xxx_messageInfo_Project.Size(m)
}
func (m *Project) XXX_DiscardUnknown() {
	xxx_messageInfo_Project.DiscardUnknown(m)
}

var xxx_messageInfo_Project proto.InternalMessageInfo

func (m *Project) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Project) GetCallbackCurrency() *Currency {
	if m != nil {
		return m.CallbackCurrency
	}
	return nil
}

func (m *Project) GetCallbackProtocol() string {
	if m != nil {
		return m.CallbackProtocol
	}
	return ""
}

func (m *Project) GetCreateInvoiceAllowedUrls() []string {
	if m != nil {
		return m.CreateInvoiceAllowedUrls
	}
	return nil
}

func (m *Project) GetMerchant() *Merchant {
	if m != nil {
		return m.Merchant
	}
	return nil
}

func (m *Project) GetIsAllowDynamicNotifyUrls() bool {
	if m != nil {
		return m.IsAllowDynamicNotifyUrls
	}
	return false
}

func (m *Project) GetIsAllowDynamicRedirectUrls() bool {
	if m != nil {
		return m.IsAllowDynamicRedirectUrls
	}
	return false
}

func (m *Project) GetLimitsCurrency() *Currency {
	if m != nil {
		return m.LimitsCurrency
	}
	return nil
}

func (m *Project) GetMaxPaymentAmount() float64 {
	if m != nil {
		return m.MaxPaymentAmount
	}
	return 0
}

func (m *Project) GetMinPaymentAmount() float64 {
	if m != nil {
		return m.MinPaymentAmount
	}
	return 0
}

func (m *Project) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Project) GetNotifyEmails() []string {
	if m != nil {
		return m.NotifyEmails
	}
	return nil
}

func (m *Project) GetOnlyFixedAmounts() bool {
	if m != nil {
		return m.OnlyFixedAmounts
	}
	return false
}

func (m *Project) GetSecretKey() string {
	if m != nil {
		return m.SecretKey
	}
	return ""
}

func (m *Project) GetSendNotifyEmail() bool {
	if m != nil {
		return m.SendNotifyEmail
	}
	return false
}

func (m *Project) GetURLCheckAccount() string {
	if m != nil {
		return m.URLCheckAccount
	}
	return ""
}

func (m *Project) GetURLProcessPayment() string {
	if m != nil {
		return m.URLProcessPayment
	}
	return ""
}

func (m *Project) GetURLRedirectFail() string {
	if m != nil {
		return m.URLRedirectFail
	}
	return ""
}

func (m *Project) GetURLRedirectSuccess() string {
	if m != nil {
		return m.URLRedirectSuccess
	}
	return ""
}

func (m *Project) GetFixedPackage() map[string]*FixedPackages {
	if m != nil {
		return m.FixedPackage
	}
	return nil
}

func (m *Project) GetPaymentMethods() map[string]*ProjectPaymentMethods {
	if m != nil {
		return m.PaymentMethods
	}
	return nil
}

func (m *Project) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

func (m *Project) GetCreatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Project) GetUpdatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

type ProjectOrder struct {
	Id                   string    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	UrlSuccess           string    `protobuf:"bytes,3,opt,name=url_success,json=urlSuccess,proto3" json:"url_success,omitempty"`
	UrlFail              string    `protobuf:"bytes,4,opt,name=url_fail,json=urlFail,proto3" json:"url_fail,omitempty"`
	NotifyEmails         []string  `protobuf:"bytes,5,rep,name=notify_emails,json=notifyEmails,proto3" json:"notify_emails,omitempty"`
	SecretKey            string    `protobuf:"bytes,6,opt,name=secret_key,json=secretKey,proto3" json:"secret_key,omitempty"`
	SendNotifyEmail      bool      `protobuf:"varint,7,opt,name=send_notify_email,json=sendNotifyEmail,proto3" json:"send_notify_email,omitempty"`
	UrlCheckAccount      string    `protobuf:"bytes,8,opt,name=url_check_account,json=urlCheckAccount,proto3" json:"url_check_account,omitempty"`
	UrlProcessPayment    string    `protobuf:"bytes,9,opt,name=url_process_payment,json=urlProcessPayment,proto3" json:"url_process_payment,omitempty"`
	CallbackProtocol     string    `protobuf:"bytes,10,opt,name=callback_protocol,json=callbackProtocol,proto3" json:"callback_protocol,omitempty"`
	Merchant             *Merchant `protobuf:"bytes,11,opt,name=merchant,proto3" json:"merchant,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ProjectOrder) Reset()         { *m = ProjectOrder{} }
func (m *ProjectOrder) String() string { return proto.CompactTextString(m) }
func (*ProjectOrder) ProtoMessage()    {}
func (*ProjectOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_billing_df375f159918e01c, []int{9}
}
func (m *ProjectOrder) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProjectOrder.Unmarshal(m, b)
}
func (m *ProjectOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProjectOrder.Marshal(b, m, deterministic)
}
func (dst *ProjectOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProjectOrder.Merge(dst, src)
}
func (m *ProjectOrder) XXX_Size() int {
	return xxx_messageInfo_ProjectOrder.Size(m)
}
func (m *ProjectOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_ProjectOrder.DiscardUnknown(m)
}

var xxx_messageInfo_ProjectOrder proto.InternalMessageInfo

func (m *ProjectOrder) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ProjectOrder) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ProjectOrder) GetUrlSuccess() string {
	if m != nil {
		return m.UrlSuccess
	}
	return ""
}

func (m *ProjectOrder) GetUrlFail() string {
	if m != nil {
		return m.UrlFail
	}
	return ""
}

func (m *ProjectOrder) GetNotifyEmails() []string {
	if m != nil {
		return m.NotifyEmails
	}
	return nil
}

func (m *ProjectOrder) GetSecretKey() string {
	if m != nil {
		return m.SecretKey
	}
	return ""
}

func (m *ProjectOrder) GetSendNotifyEmail() bool {
	if m != nil {
		return m.SendNotifyEmail
	}
	return false
}

func (m *ProjectOrder) GetUrlCheckAccount() string {
	if m != nil {
		return m.UrlCheckAccount
	}
	return ""
}

func (m *ProjectOrder) GetUrlProcessPayment() string {
	if m != nil {
		return m.UrlProcessPayment
	}
	return ""
}

func (m *ProjectOrder) GetCallbackProtocol() string {
	if m != nil {
		return m.CallbackProtocol
	}
	return ""
}

func (m *ProjectOrder) GetMerchant() *Merchant {
	if m != nil {
		return m.Merchant
	}
	return nil
}

type PaymentSystem struct {
	Id                   string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string               `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Country              *Country             `protobuf:"bytes,3,opt,name=Country,proto3" json:"Country,omitempty"`
	AccountingCurrency   *Currency            `protobuf:"bytes,4,opt,name=accounting_currency,json=accountingCurrency,proto3" json:"accounting_currency,omitempty"`
	AccountingPeriod     string               `protobuf:"bytes,5,opt,name=accounting_period,json=accountingPeriod,proto3" json:"accounting_period,omitempty"`
	IsActive             bool                 `protobuf:"varint,6,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	CreatedAt            *timestamp.Timestamp `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            *timestamp.Timestamp `protobuf:"bytes,8,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *PaymentSystem) Reset()         { *m = PaymentSystem{} }
func (m *PaymentSystem) String() string { return proto.CompactTextString(m) }
func (*PaymentSystem) ProtoMessage()    {}
func (*PaymentSystem) Descriptor() ([]byte, []int) {
	return fileDescriptor_billing_df375f159918e01c, []int{10}
}
func (m *PaymentSystem) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PaymentSystem.Unmarshal(m, b)
}
func (m *PaymentSystem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PaymentSystem.Marshal(b, m, deterministic)
}
func (dst *PaymentSystem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PaymentSystem.Merge(dst, src)
}
func (m *PaymentSystem) XXX_Size() int {
	return xxx_messageInfo_PaymentSystem.Size(m)
}
func (m *PaymentSystem) XXX_DiscardUnknown() {
	xxx_messageInfo_PaymentSystem.DiscardUnknown(m)
}

var xxx_messageInfo_PaymentSystem proto.InternalMessageInfo

func (m *PaymentSystem) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PaymentSystem) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PaymentSystem) GetCountry() *Country {
	if m != nil {
		return m.Country
	}
	return nil
}

func (m *PaymentSystem) GetAccountingCurrency() *Currency {
	if m != nil {
		return m.AccountingCurrency
	}
	return nil
}

func (m *PaymentSystem) GetAccountingPeriod() string {
	if m != nil {
		return m.AccountingPeriod
	}
	return ""
}

func (m *PaymentSystem) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

func (m *PaymentSystem) GetCreatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *PaymentSystem) GetUpdatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

type PaymentMethodParams struct {
	Handler              string            `protobuf:"bytes,1,opt,name=handler,proto3" json:"handler,omitempty"`
	Terminal             string            `protobuf:"bytes,2,opt,name=terminal,proto3" json:"terminal,omitempty"`
	ExternalId           string            `protobuf:"bytes,3,opt,name=external_id,json=externalId,proto3" json:"external_id,omitempty"`
	Other                map[string]string `protobuf:"bytes,4,rep,name=other,proto3" json:"other,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *PaymentMethodParams) Reset()         { *m = PaymentMethodParams{} }
func (m *PaymentMethodParams) String() string { return proto.CompactTextString(m) }
func (*PaymentMethodParams) ProtoMessage()    {}
func (*PaymentMethodParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_billing_df375f159918e01c, []int{11}
}
func (m *PaymentMethodParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PaymentMethodParams.Unmarshal(m, b)
}
func (m *PaymentMethodParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PaymentMethodParams.Marshal(b, m, deterministic)
}
func (dst *PaymentMethodParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PaymentMethodParams.Merge(dst, src)
}
func (m *PaymentMethodParams) XXX_Size() int {
	return xxx_messageInfo_PaymentMethodParams.Size(m)
}
func (m *PaymentMethodParams) XXX_DiscardUnknown() {
	xxx_messageInfo_PaymentMethodParams.DiscardUnknown(m)
}

var xxx_messageInfo_PaymentMethodParams proto.InternalMessageInfo

func (m *PaymentMethodParams) GetHandler() string {
	if m != nil {
		return m.Handler
	}
	return ""
}

func (m *PaymentMethodParams) GetTerminal() string {
	if m != nil {
		return m.Terminal
	}
	return ""
}

func (m *PaymentMethodParams) GetExternalId() string {
	if m != nil {
		return m.ExternalId
	}
	return ""
}

func (m *PaymentMethodParams) GetOther() map[string]string {
	if m != nil {
		return m.Other
	}
	return nil
}

type PaymentMethodOrder struct {
	Id                   string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string               `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Params               *PaymentMethodParams `protobuf:"bytes,3,opt,name=params,proto3" json:"params,omitempty"`
	PaymentSystem        *PaymentSystem       `protobuf:"bytes,4,opt,name=payment_system,json=paymentSystem,proto3" json:"payment_system,omitempty"`
	GroupAlias           string               `protobuf:"bytes,5,opt,name=group_alias,json=groupAlias,proto3" json:"group_alias,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *PaymentMethodOrder) Reset()         { *m = PaymentMethodOrder{} }
func (m *PaymentMethodOrder) String() string { return proto.CompactTextString(m) }
func (*PaymentMethodOrder) ProtoMessage()    {}
func (*PaymentMethodOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_billing_df375f159918e01c, []int{12}
}
func (m *PaymentMethodOrder) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PaymentMethodOrder.Unmarshal(m, b)
}
func (m *PaymentMethodOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PaymentMethodOrder.Marshal(b, m, deterministic)
}
func (dst *PaymentMethodOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PaymentMethodOrder.Merge(dst, src)
}
func (m *PaymentMethodOrder) XXX_Size() int {
	return xxx_messageInfo_PaymentMethodOrder.Size(m)
}
func (m *PaymentMethodOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_PaymentMethodOrder.DiscardUnknown(m)
}

var xxx_messageInfo_PaymentMethodOrder proto.InternalMessageInfo

func (m *PaymentMethodOrder) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PaymentMethodOrder) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PaymentMethodOrder) GetParams() *PaymentMethodParams {
	if m != nil {
		return m.Params
	}
	return nil
}

func (m *PaymentMethodOrder) GetPaymentSystem() *PaymentSystem {
	if m != nil {
		return m.PaymentSystem
	}
	return nil
}

func (m *PaymentMethodOrder) GetGroupAlias() string {
	if m != nil {
		return m.GroupAlias
	}
	return ""
}

type PayerData struct {
	Ip                   string   `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	CountryCodeA2        string   `protobuf:"bytes,2,opt,name=country_code_a2,json=countryCodeA2,proto3" json:"country_code_a2,omitempty"`
	CountryName          *Name    `protobuf:"bytes,3,opt,name=country_name,json=countryName,proto3" json:"country_name,omitempty"`
	City                 *Name    `protobuf:"bytes,4,opt,name=city,proto3" json:"city,omitempty"`
	Subdivision          string   `protobuf:"bytes,5,opt,name=subdivision,proto3" json:"subdivision,omitempty"`
	Timezone             string   `protobuf:"bytes,6,opt,name=timezone,proto3" json:"timezone,omitempty"`
	Phone                string   `protobuf:"bytes,7,opt,name=phone,proto3" json:"phone,omitempty"`
	Email                string   `protobuf:"bytes,8,opt,name=email,proto3" json:"email,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PayerData) Reset()         { *m = PayerData{} }
func (m *PayerData) String() string { return proto.CompactTextString(m) }
func (*PayerData) ProtoMessage()    {}
func (*PayerData) Descriptor() ([]byte, []int) {
	return fileDescriptor_billing_df375f159918e01c, []int{13}
}
func (m *PayerData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PayerData.Unmarshal(m, b)
}
func (m *PayerData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PayerData.Marshal(b, m, deterministic)
}
func (dst *PayerData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PayerData.Merge(dst, src)
}
func (m *PayerData) XXX_Size() int {
	return xxx_messageInfo_PayerData.Size(m)
}
func (m *PayerData) XXX_DiscardUnknown() {
	xxx_messageInfo_PayerData.DiscardUnknown(m)
}

var xxx_messageInfo_PayerData proto.InternalMessageInfo

func (m *PayerData) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *PayerData) GetCountryCodeA2() string {
	if m != nil {
		return m.CountryCodeA2
	}
	return ""
}

func (m *PayerData) GetCountryName() *Name {
	if m != nil {
		return m.CountryName
	}
	return nil
}

func (m *PayerData) GetCity() *Name {
	if m != nil {
		return m.City
	}
	return nil
}

func (m *PayerData) GetSubdivision() string {
	if m != nil {
		return m.Subdivision
	}
	return ""
}

func (m *PayerData) GetTimezone() string {
	if m != nil {
		return m.Timezone
	}
	return ""
}

func (m *PayerData) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *PayerData) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

type OrderFee struct {
	AmountPaymentMethodCurrency float64  `protobuf:"fixed64,1,opt,name=AmountPaymentMethodCurrency,proto3" json:"AmountPaymentMethodCurrency,omitempty"`
	AmountMerchantCurrency      float64  `protobuf:"fixed64,2,opt,name=AmountMerchantCurrency,proto3" json:"AmountMerchantCurrency,omitempty"`
	XXX_NoUnkeyedLiteral        struct{} `json:"-"`
	XXX_unrecognized            []byte   `json:"-"`
	XXX_sizecache               int32    `json:"-"`
}

func (m *OrderFee) Reset()         { *m = OrderFee{} }
func (m *OrderFee) String() string { return proto.CompactTextString(m) }
func (*OrderFee) ProtoMessage()    {}
func (*OrderFee) Descriptor() ([]byte, []int) {
	return fileDescriptor_billing_df375f159918e01c, []int{14}
}
func (m *OrderFee) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrderFee.Unmarshal(m, b)
}
func (m *OrderFee) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrderFee.Marshal(b, m, deterministic)
}
func (dst *OrderFee) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderFee.Merge(dst, src)
}
func (m *OrderFee) XXX_Size() int {
	return xxx_messageInfo_OrderFee.Size(m)
}
func (m *OrderFee) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderFee.DiscardUnknown(m)
}

var xxx_messageInfo_OrderFee proto.InternalMessageInfo

func (m *OrderFee) GetAmountPaymentMethodCurrency() float64 {
	if m != nil {
		return m.AmountPaymentMethodCurrency
	}
	return 0
}

func (m *OrderFee) GetAmountMerchantCurrency() float64 {
	if m != nil {
		return m.AmountMerchantCurrency
	}
	return 0
}

type OrderFeePsp struct {
	AmountPaymentMethodCurrency float64  `protobuf:"fixed64,1,opt,name=AmountPaymentMethodCurrency,proto3" json:"AmountPaymentMethodCurrency,omitempty"`
	AmountMerchantCurrency      float64  `protobuf:"fixed64,2,opt,name=AmountMerchantCurrency,proto3" json:"AmountMerchantCurrency,omitempty"`
	AmountPspCurrency           float64  `protobuf:"fixed64,3,opt,name=AmountPspCurrency,proto3" json:"AmountPspCurrency,omitempty"`
	XXX_NoUnkeyedLiteral        struct{} `json:"-"`
	XXX_unrecognized            []byte   `json:"-"`
	XXX_sizecache               int32    `json:"-"`
}

func (m *OrderFeePsp) Reset()         { *m = OrderFeePsp{} }
func (m *OrderFeePsp) String() string { return proto.CompactTextString(m) }
func (*OrderFeePsp) ProtoMessage()    {}
func (*OrderFeePsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_billing_df375f159918e01c, []int{15}
}
func (m *OrderFeePsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrderFeePsp.Unmarshal(m, b)
}
func (m *OrderFeePsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrderFeePsp.Marshal(b, m, deterministic)
}
func (dst *OrderFeePsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderFeePsp.Merge(dst, src)
}
func (m *OrderFeePsp) XXX_Size() int {
	return xxx_messageInfo_OrderFeePsp.Size(m)
}
func (m *OrderFeePsp) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderFeePsp.DiscardUnknown(m)
}

var xxx_messageInfo_OrderFeePsp proto.InternalMessageInfo

func (m *OrderFeePsp) GetAmountPaymentMethodCurrency() float64 {
	if m != nil {
		return m.AmountPaymentMethodCurrency
	}
	return 0
}

func (m *OrderFeePsp) GetAmountMerchantCurrency() float64 {
	if m != nil {
		return m.AmountMerchantCurrency
	}
	return 0
}

func (m *OrderFeePsp) GetAmountPspCurrency() float64 {
	if m != nil {
		return m.AmountPspCurrency
	}
	return 0
}

// Contain information about payment system commission in other currencies
type OrderFeePaymentSystem struct {
	// amount of fee of payment system in payment currency
	AmountPaymentMethodCurrency float64  `protobuf:"fixed64,1,opt,name=AmountPaymentMethodCurrency,proto3" json:"AmountPaymentMethodCurrency,omitempty"`
	AmountMerchantCurrency      float64  `protobuf:"fixed64,2,opt,name=AmountMerchantCurrency,proto3" json:"AmountMerchantCurrency,omitempty"`
	AmountPaymentSystemCurrency float64  `protobuf:"fixed64,3,opt,name=AmountPaymentSystemCurrency,proto3" json:"AmountPaymentSystemCurrency,omitempty"`
	XXX_NoUnkeyedLiteral        struct{} `json:"-"`
	XXX_unrecognized            []byte   `json:"-"`
	XXX_sizecache               int32    `json:"-"`
}

func (m *OrderFeePaymentSystem) Reset()         { *m = OrderFeePaymentSystem{} }
func (m *OrderFeePaymentSystem) String() string { return proto.CompactTextString(m) }
func (*OrderFeePaymentSystem) ProtoMessage()    {}
func (*OrderFeePaymentSystem) Descriptor() ([]byte, []int) {
	return fileDescriptor_billing_df375f159918e01c, []int{16}
}
func (m *OrderFeePaymentSystem) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrderFeePaymentSystem.Unmarshal(m, b)
}
func (m *OrderFeePaymentSystem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrderFeePaymentSystem.Marshal(b, m, deterministic)
}
func (dst *OrderFeePaymentSystem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderFeePaymentSystem.Merge(dst, src)
}
func (m *OrderFeePaymentSystem) XXX_Size() int {
	return xxx_messageInfo_OrderFeePaymentSystem.Size(m)
}
func (m *OrderFeePaymentSystem) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderFeePaymentSystem.DiscardUnknown(m)
}

var xxx_messageInfo_OrderFeePaymentSystem proto.InternalMessageInfo

func (m *OrderFeePaymentSystem) GetAmountPaymentMethodCurrency() float64 {
	if m != nil {
		return m.AmountPaymentMethodCurrency
	}
	return 0
}

func (m *OrderFeePaymentSystem) GetAmountMerchantCurrency() float64 {
	if m != nil {
		return m.AmountMerchantCurrency
	}
	return 0
}

func (m *OrderFeePaymentSystem) GetAmountPaymentSystemCurrency() float64 {
	if m != nil {
		return m.AmountPaymentSystemCurrency
	}
	return 0
}

type Order struct {
	Id                                      string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Project                                 *ProjectOrder          `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	ProjectOrderId                          string                 `protobuf:"bytes,3,opt,name=project_order_id,json=projectOrderId,proto3" json:"project_order_id,omitempty"`
	ProjectAccount                          string                 `protobuf:"bytes,4,opt,name=project_account,json=projectAccount,proto3" json:"project_account,omitempty"`
	Description                             string                 `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	ProjectIncomeAmount                     float64                `protobuf:"fixed64,6,opt,name=project_income_amount,json=projectIncomeAmount,proto3" json:"project_income_amount,omitempty"`
	ProjectIncomeCurrency                   *Currency              `protobuf:"bytes,7,opt,name=project_income_currency,json=projectIncomeCurrency,proto3" json:"project_income_currency,omitempty"`
	ProjectOutcomeAmount                    float64                `protobuf:"fixed64,8,opt,name=project_outcome_amount,json=projectOutcomeAmount,proto3" json:"project_outcome_amount,omitempty"`
	ProjectOutcomeCurrency                  *Currency              `protobuf:"bytes,9,opt,name=Project_outcome_currency,json=ProjectOutcomeCurrency,proto3" json:"Project_outcome_currency,omitempty"`
	ProjectLastRequestedAt                  *timestamp.Timestamp   `protobuf:"bytes,10,opt,name=project_last_requested_at,json=projectLastRequestedAt,proto3" json:"project_last_requested_at,omitempty"`
	ProjectParams                           map[string]string      `protobuf:"bytes,11,rep,name=project_params,json=projectParams,proto3" json:"project_params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PayerData                               *PayerData             `protobuf:"bytes,12,opt,name=payer_data,json=payerData,proto3" json:"payer_data,omitempty"`
	PaymentMethod                           *PaymentMethodOrder    `protobuf:"bytes,13,opt,name=payment_method,json=paymentMethod,proto3" json:"payment_method,omitempty"`
	PaymentMethodTerminalId                 string                 `protobuf:"bytes,14,opt,name=payment_method_terminal_id,json=paymentMethodTerminalId,proto3" json:"payment_method_terminal_id,omitempty"`
	PaymentMethodOrderId                    string                 `protobuf:"bytes,15,opt,name=payment_method_orderId,json=paymentMethodOrderId,proto3" json:"payment_method_orderId,omitempty"`
	PaymentMethodOutcomeAmount              float64                `protobuf:"fixed64,16,opt,name=payment_method_outcome_amount,json=paymentMethodOutcomeAmount,proto3" json:"payment_method_outcome_amount,omitempty"`
	PaymentMethodOutcomeCurrency            *Currency              `protobuf:"bytes,17,opt,name=payment_method_outcome_currency,json=paymentMethodOutcomeCurrency,proto3" json:"payment_method_outcome_currency,omitempty"`
	PaymentMethodIncomeAmount               float64                `protobuf:"fixed64,18,opt,name=payment_method_income_amount,json=paymentMethodIncomeAmount,proto3" json:"payment_method_income_amount,omitempty"`
	PaymentMethodIncomeCurrency             *Currency              `protobuf:"bytes,19,opt,name=payment_method_income_currency,json=paymentMethodIncomeCurrency,proto3" json:"payment_method_income_currency,omitempty"`
	PaymentMethodIncomeCurrencyA3           string                 `protobuf:"bytes,20,opt,name=payment_method_income_currency_a3,json=paymentMethodIncomeCurrencyA3,proto3" json:"payment_method_income_currency_a3,omitempty"`
	PaymentMethodOrderClosedAt              *timestamp.Timestamp   `protobuf:"bytes,21,opt,name=payment_method_order_closed_at,json=paymentMethodOrderClosedAt,proto3" json:"payment_method_order_closed_at,omitempty"`
	Status                                  int32                  `protobuf:"varint,22,opt,name=status,proto3" json:"status,omitempty"`
	CreatedAt                               *timestamp.Timestamp   `protobuf:"bytes,23,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt                               *timestamp.Timestamp   `protobuf:"bytes,24,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	IsJsonRequest                           bool                   `protobuf:"varint,25,opt,name=is_json_request,json=isJsonRequest,proto3" json:"is_json_request,omitempty"`
	AmountInPspAccountingCurrency           float64                `protobuf:"fixed64,26,opt,name=amount_in_psp_accounting_currency,json=amountInPspAccountingCurrency,proto3" json:"amount_in_psp_accounting_currency,omitempty"`
	AmountInMerchantAccountingCurrency      float64                `protobuf:"fixed64,27,opt,name=amount_in_merchant_accounting_currency,json=amountInMerchantAccountingCurrency,proto3" json:"amount_in_merchant_accounting_currency,omitempty"`
	AmountOutMerchantAccountingCurrency     float64                `protobuf:"fixed64,28,opt,name=amount_out_merchant_accounting_currency,json=amountOutMerchantAccountingCurrency,proto3" json:"amount_out_merchant_accounting_currency,omitempty"`
	AmountInPaymentSystemAccountingCurrency float64                `protobuf:"fixed64,29,opt,name=amount_in_payment_system_accounting_currency,json=amountInPaymentSystemAccountingCurrency,proto3" json:"amount_in_payment_system_accounting_currency,omitempty"`
	PaymentMethodPayerAccount               string                 `protobuf:"bytes,30,opt,name=payment_method_payer_account,json=paymentMethodPayerAccount,proto3" json:"payment_method_payer_account,omitempty"`
	PaymentMethodTxnParams                  map[string]string      `protobuf:"bytes,31,rep,name=payment_method_txn_params,json=paymentMethodTxnParams,proto3" json:"payment_method_txn_params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	FixedPackage                            *FixedPackage          `protobuf:"bytes,32,opt,name=fixed_package,json=fixedPackage,proto3" json:"fixed_package,omitempty"`
	PaymentRequisites                       map[string]string      `protobuf:"bytes,33,rep,name=payment_requisites,json=paymentRequisites,proto3" json:"payment_requisites,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PspFeeAmount                            *OrderFeePsp           `protobuf:"bytes,34,opt,name=psp_fee_amount,json=pspFeeAmount,proto3" json:"psp_fee_amount,omitempty"`
	ProjectFeeAmount                        *OrderFee              `protobuf:"bytes,35,opt,name=project_fee_amount,json=projectFeeAmount,proto3" json:"project_fee_amount,omitempty"`
	ToPayerFeeAmount                        *OrderFee              `protobuf:"bytes,36,opt,name=to_payer_fee_amount,json=toPayerFeeAmount,proto3" json:"to_payer_fee_amount,omitempty"`
	VatAmount                               float64                `protobuf:"fixed64,37,opt,name=vat_amount,json=vatAmount,proto3" json:"vat_amount,omitempty"`
	PaymentSystemFeeAmount                  *OrderFeePaymentSystem `protobuf:"bytes,38,opt,name=payment_system_fee_amount,json=paymentSystemFeeAmount,proto3" json:"payment_system_fee_amount,omitempty"`
	XXX_NoUnkeyedLiteral                    struct{}               `json:"-"`
	XXX_unrecognized                        []byte                 `json:"-"`
	XXX_sizecache                           int32                  `json:"-"`
}

func (m *Order) Reset()         { *m = Order{} }
func (m *Order) String() string { return proto.CompactTextString(m) }
func (*Order) ProtoMessage()    {}
func (*Order) Descriptor() ([]byte, []int) {
	return fileDescriptor_billing_df375f159918e01c, []int{17}
}
func (m *Order) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Order.Unmarshal(m, b)
}
func (m *Order) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Order.Marshal(b, m, deterministic)
}
func (dst *Order) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Order.Merge(dst, src)
}
func (m *Order) XXX_Size() int {
	return xxx_messageInfo_Order.Size(m)
}
func (m *Order) XXX_DiscardUnknown() {
	xxx_messageInfo_Order.DiscardUnknown(m)
}

var xxx_messageInfo_Order proto.InternalMessageInfo

func (m *Order) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Order) GetProject() *ProjectOrder {
	if m != nil {
		return m.Project
	}
	return nil
}

func (m *Order) GetProjectOrderId() string {
	if m != nil {
		return m.ProjectOrderId
	}
	return ""
}

func (m *Order) GetProjectAccount() string {
	if m != nil {
		return m.ProjectAccount
	}
	return ""
}

func (m *Order) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Order) GetProjectIncomeAmount() float64 {
	if m != nil {
		return m.ProjectIncomeAmount
	}
	return 0
}

func (m *Order) GetProjectIncomeCurrency() *Currency {
	if m != nil {
		return m.ProjectIncomeCurrency
	}
	return nil
}

func (m *Order) GetProjectOutcomeAmount() float64 {
	if m != nil {
		return m.ProjectOutcomeAmount
	}
	return 0
}

func (m *Order) GetProjectOutcomeCurrency() *Currency {
	if m != nil {
		return m.ProjectOutcomeCurrency
	}
	return nil
}

func (m *Order) GetProjectLastRequestedAt() *timestamp.Timestamp {
	if m != nil {
		return m.ProjectLastRequestedAt
	}
	return nil
}

func (m *Order) GetProjectParams() map[string]string {
	if m != nil {
		return m.ProjectParams
	}
	return nil
}

func (m *Order) GetPayerData() *PayerData {
	if m != nil {
		return m.PayerData
	}
	return nil
}

func (m *Order) GetPaymentMethod() *PaymentMethodOrder {
	if m != nil {
		return m.PaymentMethod
	}
	return nil
}

func (m *Order) GetPaymentMethodTerminalId() string {
	if m != nil {
		return m.PaymentMethodTerminalId
	}
	return ""
}

func (m *Order) GetPaymentMethodOrderId() string {
	if m != nil {
		return m.PaymentMethodOrderId
	}
	return ""
}

func (m *Order) GetPaymentMethodOutcomeAmount() float64 {
	if m != nil {
		return m.PaymentMethodOutcomeAmount
	}
	return 0
}

func (m *Order) GetPaymentMethodOutcomeCurrency() *Currency {
	if m != nil {
		return m.PaymentMethodOutcomeCurrency
	}
	return nil
}

func (m *Order) GetPaymentMethodIncomeAmount() float64 {
	if m != nil {
		return m.PaymentMethodIncomeAmount
	}
	return 0
}

func (m *Order) GetPaymentMethodIncomeCurrency() *Currency {
	if m != nil {
		return m.PaymentMethodIncomeCurrency
	}
	return nil
}

func (m *Order) GetPaymentMethodIncomeCurrencyA3() string {
	if m != nil {
		return m.PaymentMethodIncomeCurrencyA3
	}
	return ""
}

func (m *Order) GetPaymentMethodOrderClosedAt() *timestamp.Timestamp {
	if m != nil {
		return m.PaymentMethodOrderClosedAt
	}
	return nil
}

func (m *Order) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *Order) GetCreatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Order) GetUpdatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *Order) GetIsJsonRequest() bool {
	if m != nil {
		return m.IsJsonRequest
	}
	return false
}

func (m *Order) GetAmountInPspAccountingCurrency() float64 {
	if m != nil {
		return m.AmountInPspAccountingCurrency
	}
	return 0
}

func (m *Order) GetAmountInMerchantAccountingCurrency() float64 {
	if m != nil {
		return m.AmountInMerchantAccountingCurrency
	}
	return 0
}

func (m *Order) GetAmountOutMerchantAccountingCurrency() float64 {
	if m != nil {
		return m.AmountOutMerchantAccountingCurrency
	}
	return 0
}

func (m *Order) GetAmountInPaymentSystemAccountingCurrency() float64 {
	if m != nil {
		return m.AmountInPaymentSystemAccountingCurrency
	}
	return 0
}

func (m *Order) GetPaymentMethodPayerAccount() string {
	if m != nil {
		return m.PaymentMethodPayerAccount
	}
	return ""
}

func (m *Order) GetPaymentMethodTxnParams() map[string]string {
	if m != nil {
		return m.PaymentMethodTxnParams
	}
	return nil
}

func (m *Order) GetFixedPackage() *FixedPackage {
	if m != nil {
		return m.FixedPackage
	}
	return nil
}

func (m *Order) GetPaymentRequisites() map[string]string {
	if m != nil {
		return m.PaymentRequisites
	}
	return nil
}

func (m *Order) GetPspFeeAmount() *OrderFeePsp {
	if m != nil {
		return m.PspFeeAmount
	}
	return nil
}

func (m *Order) GetProjectFeeAmount() *OrderFee {
	if m != nil {
		return m.ProjectFeeAmount
	}
	return nil
}

func (m *Order) GetToPayerFeeAmount() *OrderFee {
	if m != nil {
		return m.ToPayerFeeAmount
	}
	return nil
}

func (m *Order) GetVatAmount() float64 {
	if m != nil {
		return m.VatAmount
	}
	return 0
}

func (m *Order) GetPaymentSystemFeeAmount() *OrderFeePaymentSystem {
	if m != nil {
		return m.PaymentSystemFeeAmount
	}
	return nil
}

func init() {
	proto.RegisterType((*Name)(nil), "billing.Name")
	proto.RegisterType((*Country)(nil), "billing.Country")
	proto.RegisterType((*Currency)(nil), "billing.Currency")
	proto.RegisterType((*Merchant)(nil), "billing.Merchant")
	proto.RegisterType((*FixedPackage)(nil), "billing.FixedPackage")
	proto.RegisterType((*FixedPackages)(nil), "billing.FixedPackages")
	proto.RegisterType((*ProjectPaymentMethod)(nil), "billing.ProjectPaymentMethod")
	proto.RegisterType((*ProjectPaymentMethods)(nil), "billing.ProjectPaymentMethods")
	proto.RegisterType((*Project)(nil), "billing.Project")
	proto.RegisterMapType((map[string]*FixedPackages)(nil), "billing.Project.FixedPackageEntry")
	proto.RegisterMapType((map[string]*ProjectPaymentMethods)(nil), "billing.Project.PaymentMethodsEntry")
	proto.RegisterType((*ProjectOrder)(nil), "billing.ProjectOrder")
	proto.RegisterType((*PaymentSystem)(nil), "billing.PaymentSystem")
	proto.RegisterType((*PaymentMethodParams)(nil), "billing.PaymentMethodParams")
	proto.RegisterMapType((map[string]string)(nil), "billing.PaymentMethodParams.OtherEntry")
	proto.RegisterType((*PaymentMethodOrder)(nil), "billing.PaymentMethodOrder")
	proto.RegisterType((*PayerData)(nil), "billing.PayerData")
	proto.RegisterType((*OrderFee)(nil), "billing.OrderFee")
	proto.RegisterType((*OrderFeePsp)(nil), "billing.OrderFeePsp")
	proto.RegisterType((*OrderFeePaymentSystem)(nil), "billing.OrderFeePaymentSystem")
	proto.RegisterType((*Order)(nil), "billing.Order")
	proto.RegisterMapType((map[string]string)(nil), "billing.Order.PaymentMethodTxnParamsEntry")
	proto.RegisterMapType((map[string]string)(nil), "billing.Order.PaymentRequisitesEntry")
	proto.RegisterMapType((map[string]string)(nil), "billing.Order.ProjectParamsEntry")
	proto.RegisterEnum("billing.AccountingPeriod", AccountingPeriod_name, AccountingPeriod_value)
}

func init() { proto.RegisterFile("billing/billing.proto", fileDescriptor_billing_df375f159918e01c) }

var fileDescriptor_billing_df375f159918e01c = []byte{
	// 2418 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x59, 0xcd, 0x72, 0xdb, 0xc8,
	0xf1, 0xff, 0x53, 0x94, 0x44, 0xb2, 0x29, 0x4a, 0xd4, 0xe8, 0xc3, 0x10, 0x25, 0x59, 0x32, 0xd7,
	0x6b, 0xab, 0xf4, 0xf7, 0x4a, 0x89, 0xe4, 0x4a, 0x36, 0x4e, 0xbc, 0x6b, 0x5a, 0xb6, 0xb2, 0x8c,
	0xbf, 0x58, 0xb0, 0xbd, 0xf9, 0xa8, 0x4a, 0x50, 0x23, 0x60, 0x24, 0xcd, 0x0a, 0x04, 0xb0, 0x98,
	0x81, 0x6c, 0xe6, 0x98, 0xca, 0x31, 0xe7, 0xbc, 0x45, 0x8e, 0x79, 0x8d, 0x54, 0xaa, 0xf2, 0x08,
	0xa9, 0xbc, 0x41, 0x2e, 0xb9, 0xa4, 0x52, 0x98, 0x0f, 0x10, 0x00, 0x41, 0xca, 0xf2, 0x65, 0x93,
	0x93, 0x38, 0x3d, 0xdd, 0xbf, 0xe9, 0x99, 0xee, 0xfe, 0x4d, 0x0f, 0x04, 0x2b, 0x27, 0xd4, 0x75,
	0xa9, 0x77, 0xb6, 0xaf, 0xfe, 0xee, 0x05, 0xa1, 0xcf, 0x7d, 0x54, 0x51, 0xc3, 0xd6, 0xd6, 0x99,
	0xef, 0x9f, 0xb9, 0x64, 0x5f, 0x88, 0x4f, 0xa2, 0xd3, 0x7d, 0x4e, 0xfb, 0x84, 0x71, 0xdc, 0x0f,
	0xa4, 0x66, 0xfb, 0x0e, 0x4c, 0xbf, 0xc4, 0x7d, 0x82, 0xe6, 0x61, 0x8a, 0x78, 0x46, 0x69, 0xbb,
	0xb4, 0x53, 0x33, 0xa7, 0x88, 0x17, 0x8f, 0xc3, 0xc8, 0x98, 0x92, 0xe3, 0x30, 0x6a, 0xff, 0x61,
	0x0a, 0x2a, 0x47, 0x7e, 0xe4, 0xf1, 0x70, 0x80, 0xd6, 0xa0, 0x6a, 0xfb, 0x0e, 0xb1, 0xa8, 0xc7,
	0x85, 0xc5, 0x8c, 0x59, 0x89, 0xc7, 0x5d, 0x8f, 0xa3, 0x1b, 0x20, 0x7e, 0x5a, 0xf8, 0x40, 0xd9,
	0xce, 0xc6, 0xc3, 0xce, 0xc1, 0x70, 0xe2, 0xd0, 0x28, 0xa7, 0x26, 0x0e, 0xd1, 0x2d, 0x98, 0xf6,
	0x70, 0x9f, 0x18, 0xd3, 0xdb, 0xa5, 0x9d, 0xfa, 0x41, 0x63, 0x4f, 0x6f, 0x24, 0xf6, 0xca, 0x14,
	0x53, 0x68, 0x1d, 0x6a, 0x94, 0x59, 0xd8, 0xe6, 0xf4, 0x92, 0x18, 0x33, 0xdb, 0xa5, 0x9d, 0xaa,
	0x59, 0xa5, 0xac, 0x23, 0xc6, 0xe8, 0x47, 0x00, 0x76, 0x48, 0x30, 0x27, 0x8e, 0x85, 0xb9, 0x31,
	0x2b, 0x50, 0x5a, 0x7b, 0x72, 0xdb, 0x7b, 0x7a, 0xdb, 0x7b, 0x6f, 0xf4, 0xb6, 0xcd, 0x9a, 0xd2,
	0xee, 0xf0, 0xd8, 0x34, 0x0a, 0x1c, 0x6d, 0x5a, 0xb9, 0xda, 0x54, 0x69, 0x77, 0x78, 0xfb, 0x9f,
	0x25, 0xa8, 0x1e, 0x45, 0x61, 0x48, 0x3c, 0xfb, 0xc3, 0xce, 0xe3, 0x30, 0x73, 0x1e, 0xff, 0xab,
	0xdb, 0xfe, 0x77, 0x19, 0xaa, 0x2f, 0x48, 0x68, 0x9f, 0x63, 0x8f, 0xc7, 0x29, 0x42, 0x1d, 0x9d,
	0x32, 0xd4, 0x41, 0x5b, 0x50, 0x27, 0xef, 0x39, 0x09, 0x3d, 0xec, 0x5a, 0xd4, 0x51, 0xfb, 0x05,
	0x2d, 0xea, 0x3a, 0x68, 0x19, 0x66, 0x48, 0x1f, 0x53, 0x57, 0x65, 0x80, 0x1c, 0x20, 0x94, 0x3a,
	0x89, 0x9a, 0xda, 0xfa, 0x6e, 0x7c, 0x6c, 0x22, 0xd9, 0xc4, 0xc6, 0xeb, 0x07, 0xcd, 0xe4, 0x80,
	0x54, 0x12, 0x9a, 0x5a, 0x01, 0x1d, 0xc3, 0x22, 0xb6, 0xc5, 0x80, 0x7a, 0x67, 0x56, 0x40, 0x42,
	0xea, 0x3b, 0xe2, 0x40, 0xe6, 0x0f, 0xd6, 0x12, 0xab, 0x4e, 0xa2, 0xd1, 0x13, 0x0a, 0x66, 0x13,
	0xe7, 0x24, 0xe8, 0x33, 0xa8, 0xda, 0x2a, 0xa2, 0xea, 0x50, 0x16, 0x87, 0x8b, 0xaa, 0x09, 0x33,
	0x51, 0x41, 0xb7, 0x61, 0x9e, 0x32, 0xeb, 0x12, 0x73, 0x8b, 0x78, 0xf8, 0xc4, 0x25, 0x8e, 0x51,
	0x15, 0x21, 0x9a, 0xa3, 0xec, 0x6b, 0xcc, 0x9f, 0x4a, 0x19, 0x7a, 0x04, 0x9b, 0x94, 0x59, 0xb6,
	0xdf, 0xef, 0x53, 0xc6, 0xa8, 0xef, 0x59, 0xdc, 0xb7, 0x22, 0x46, 0xc2, 0xc4, 0xa8, 0x26, 0x8c,
	0xd6, 0x28, 0x3b, 0x4a, 0x74, 0xde, 0xf8, 0x6f, 0x19, 0x09, 0x35, 0xc2, 0x2a, 0xcc, 0x32, 0x8e,
	0x79, 0xc4, 0x0c, 0x10, 0xa9, 0xa5, 0x46, 0xb9, 0x04, 0xa8, 0x7f, 0x7c, 0x02, 0xcc, 0x5d, 0x27,
	0x01, 0xfe, 0x34, 0x05, 0x73, 0xc7, 0xf4, 0x3d, 0x71, 0x7a, 0xd8, 0xbe, 0xc0, 0x67, 0x64, 0x24,
	0x09, 0x74, 0x34, 0xa7, 0x52, 0xd1, 0xbc, 0x05, 0x73, 0xfa, 0xd8, 0x44, 0x8d, 0x94, 0xc5, 0x46,
	0xea, 0x5a, 0x16, 0xd7, 0xc9, 0x32, 0xcc, 0x04, 0x21, 0xb5, 0x65, 0x16, 0x94, 0x4c, 0x39, 0xf8,
	0x2f, 0xac, 0x80, 0x4c, 0x96, 0x54, 0xaf, 0xcc, 0x92, 0xf6, 0x33, 0x68, 0xa4, 0x8f, 0x8b, 0xa1,
	0x07, 0xd0, 0x38, 0x8d, 0x05, 0x56, 0x20, 0x25, 0x46, 0x69, 0xbb, 0xbc, 0x53, 0x3f, 0x58, 0x49,
	0x40, 0xd2, 0xea, 0xe6, 0xdc, 0x69, 0x6a, 0xd4, 0xb6, 0x60, 0xb9, 0x17, 0xfa, 0xdf, 0x10, 0x9b,
	0xf7, 0xf0, 0xa0, 0x4f, 0x3c, 0xfe, 0x82, 0xf0, 0x73, 0xdf, 0x19, 0x89, 0xc1, 0x0f, 0xa1, 0x86,
	0x1d, 0x27, 0xde, 0x5c, 0x87, 0x8b, 0x40, 0x4c, 0xde, 0x5d, 0x55, 0x28, 0x77, 0x3a, 0xbc, 0x6d,
	0xc1, 0x4a, 0xd1, 0x02, 0x0c, 0x1d, 0xc3, 0x42, 0x20, 0x25, 0x56, 0x5f, 0x8a, 0x94, 0xdf, 0x9b,
	0x89, 0xdf, 0x45, 0x86, 0xe6, 0x7c, 0x90, 0xc1, 0x69, 0xff, 0x15, 0xa0, 0xa2, 0x14, 0x47, 0xbc,
	0xfe, 0x02, 0x16, 0x6d, 0xec, 0xba, 0x27, 0xd8, 0xbe, 0xb0, 0x92, 0x23, 0x9e, 0x1a, 0x77, 0xc4,
	0x4d, 0xad, 0x9b, 0xb0, 0xf0, 0xff, 0xa7, 0xec, 0xc5, 0x2e, 0x6d, 0x5f, 0x33, 0x4d, 0xa2, 0xdc,
	0x53, 0x72, 0xf4, 0x10, 0xd6, 0x65, 0x3a, 0x58, 0xd4, 0xbb, 0xf4, 0xa9, 0x4d, 0x2c, 0xec, 0xba,
	0xfe, 0x3b, 0xe2, 0x58, 0x51, 0xe8, 0x32, 0x63, 0x7a, 0xbb, 0xbc, 0x53, 0x33, 0x0d, 0xa9, 0xd2,
	0x95, 0x1a, 0x1d, 0xa9, 0xf0, 0x36, 0x74, 0x59, 0x9c, 0x05, 0x7d, 0x45, 0x83, 0x8a, 0xa0, 0x86,
	0x2e, 0x6a, 0x7e, 0x34, 0x13, 0x15, 0xf4, 0x05, 0x6c, 0xc4, 0x79, 0x1c, 0x03, 0x58, 0xce, 0xc0,
	0xc3, 0x7d, 0x6a, 0x5b, 0x9e, 0xcf, 0xe9, 0xe9, 0x40, 0x2e, 0x37, 0x2b, 0x52, 0xdb, 0xa0, 0x4c,
	0xac, 0xf1, 0x44, 0x6a, 0xbc, 0x14, 0x0a, 0x62, 0xb9, 0xc7, 0x70, 0x73, 0xc4, 0x3e, 0x24, 0x0e,
	0x0d, 0x89, 0xcd, 0x25, 0x42, 0x45, 0x20, 0xb4, 0xb2, 0x08, 0xa6, 0x52, 0x11, 0x18, 0x0f, 0x60,
	0xc1, 0xa5, 0x7d, 0xca, 0x99, 0x75, 0x75, 0xfe, 0xce, 0x4b, 0xcd, 0xe4, 0x68, 0x77, 0xa1, 0xf9,
	0x02, 0xbf, 0x57, 0xa1, 0xed, 0xf4, 0x63, 0xde, 0x14, 0xc4, 0x55, 0x32, 0x47, 0xe4, 0x42, 0x97,
	0x7a, 0x59, 0x5d, 0x50, 0xba, 0x39, 0x79, 0x4c, 0x16, 0xf1, 0x7d, 0x27, 0xd8, 0xab, 0x66, 0xca,
	0x46, 0xa4, 0x0d, 0x73, 0x72, 0xe7, 0x4f, 0xe3, 0xdb, 0x81, 0x19, 0x73, 0x22, 0x14, 0x19, 0x59,
	0xbc, 0xc6, 0x2b, 0xcf, 0x1d, 0x88, 0x52, 0x91, 0x50, 0xcc, 0x68, 0x88, 0x13, 0x18, 0x91, 0xa3,
	0x0d, 0xa8, 0xbd, 0x26, 0x76, 0x48, 0xf8, 0x33, 0x32, 0x30, 0xe6, 0xc5, 0x42, 0x43, 0x01, 0xda,
	0x81, 0x85, 0xd7, 0xc4, 0x73, 0x52, 0xe8, 0xc6, 0x82, 0x00, 0xca, 0x8b, 0x63, 0xcd, 0xb7, 0xe6,
	0xf3, 0xa3, 0x73, 0x62, 0x5f, 0xa8, 0xcb, 0xc4, 0x68, 0x0a, 0xb4, 0xbc, 0x18, 0xdd, 0x83, 0xc5,
	0xb7, 0xe6, 0xf3, 0x5e, 0xe8, 0xdb, 0x84, 0x31, 0xb5, 0x61, 0x63, 0x51, 0xe8, 0x8e, 0x4e, 0x28,
	0x5c, 0x1d, 0xaa, 0xe3, 0xd8, 0x03, 0x94, 0xe0, 0xa6, 0xc5, 0x68, 0x0f, 0x50, 0x4a, 0xf4, 0x3a,
	0xb2, 0x63, 0x18, 0x63, 0x49, 0x28, 0x17, 0xcc, 0xa0, 0x9f, 0xe6, 0xa9, 0xe6, 0x86, 0x28, 0xd9,
	0x76, 0xbe, 0x64, 0x33, 0x94, 0xf3, 0x54, 0x5c, 0xae, 0x19, 0xde, 0x41, 0x2f, 0x46, 0xab, 0xdf,
	0x10, 0x50, 0xb7, 0x47, 0xa0, 0xb2, 0xbc, 0x21, 0xc1, 0x72, 0x24, 0x80, 0x5a, 0x50, 0xed, 0x2a,
	0x12, 0x37, 0x96, 0x25, 0xa9, 0x77, 0x8b, 0x49, 0x7d, 0xe5, 0xe3, 0x49, 0x7d, 0xf5, 0x1a, 0xa4,
	0xde, 0xfa, 0x39, 0x2c, 0x8e, 0x9c, 0x01, 0x6a, 0x42, 0xf9, 0x82, 0x0c, 0x14, 0x41, 0xc5, 0x3f,
	0xd1, 0x3d, 0x98, 0xb9, 0xc4, 0x6e, 0x44, 0x14, 0x2b, 0xad, 0x16, 0x72, 0x36, 0x33, 0xa5, 0xd2,
	0x83, 0xa9, 0xcf, 0x4b, 0x2d, 0x0c, 0x4b, 0x05, 0x27, 0x52, 0x00, 0x7d, 0x3f, 0x0b, 0x7d, 0x73,
	0x22, 0xad, 0xa6, 0x97, 0x68, 0xff, 0xb1, 0x0c, 0x73, 0x4a, 0xe9, 0x55, 0xe8, 0x90, 0xf0, 0x83,
	0x6e, 0xe4, 0x2d, 0xa8, 0x47, 0xa1, 0x6b, 0x31, 0x95, 0x43, 0x92, 0x25, 0x21, 0x0a, 0x5d, 0x9d,
	0x3b, 0x6b, 0x50, 0x8d, 0x15, 0x4e, 0xe3, 0x74, 0x94, 0x8d, 0x59, 0x25, 0x0a, 0x5d, 0x91, 0x86,
	0x9f, 0x40, 0x43, 0x71, 0x17, 0x91, 0x15, 0x3a, 0x23, 0x2b, 0xd4, 0x4b, 0x57, 0xe8, 0x26, 0x00,
	0x13, 0x45, 0x66, 0xc5, 0x1b, 0x9d, 0x95, 0x65, 0xc7, 0x92, 0xb2, 0xdb, 0x85, 0x45, 0x46, 0x3c,
	0xc7, 0x4a, 0x03, 0x29, 0x0e, 0x5b, 0x60, 0xb9, 0xc2, 0xdb, 0x85, 0xc5, 0xd8, 0x15, 0x3b, 0x2e,
	0x31, 0x4b, 0x75, 0x6d, 0x82, 0xba, 0x6a, 0xe6, 0x42, 0x14, 0xba, 0x99, 0xd2, 0xdb, 0x83, 0xa5,
	0x58, 0x37, 0x90, 0x25, 0x66, 0xa9, 0xc4, 0x13, 0x5c, 0x55, 0x33, 0x63, 0x98, 0x5c, 0xf1, 0x15,
	0xde, 0x19, 0x30, 0xe6, 0xce, 0x48, 0x93, 0x7e, 0xfd, 0x4a, 0xd2, 0x6f, 0xff, 0x7d, 0x0a, 0x1a,
	0x6a, 0x9d, 0xd7, 0x03, 0xc6, 0x49, 0xff, 0x83, 0x22, 0xb3, 0x9b, 0x3c, 0xb3, 0x44, 0x54, 0x0a,
	0x3b, 0x5f, 0xfd, 0x0e, 0x7b, 0x0c, 0x4b, 0xa9, 0xce, 0x37, 0xa1, 0xf5, 0xe9, 0x71, 0xb4, 0x8e,
	0x86, 0xda, 0xe9, 0x5b, 0x73, 0xb4, 0x7b, 0x9e, 0x91, 0x27, 0x30, 0xd2, 0x22, 0x67, 0xfa, 0xb1,
	0xd9, 0x89, 0xfd, 0x58, 0xe5, 0xe3, 0x4b, 0xb7, 0x7a, 0x9d, 0x86, 0xf4, 0x1f, 0xa5, 0x5c, 0x89,
	0xf5, 0x70, 0x88, 0xfb, 0x0c, 0x19, 0x50, 0x39, 0xc7, 0x9e, 0xe3, 0x92, 0x50, 0x1d, 0xb8, 0x1e,
	0xc6, 0xf4, 0xc3, 0x49, 0xd8, 0xa7, 0x1e, 0x76, 0xd5, 0xc9, 0x27, 0xe3, 0xfc, 0x13, 0xa6, 0x3c,
	0xf2, 0x84, 0x79, 0x08, 0x33, 0x3e, 0x3f, 0x27, 0xa1, 0xe8, 0x10, 0xea, 0x07, 0x77, 0x87, 0x75,
	0x3a, 0xea, 0xc3, 0xde, 0xab, 0x58, 0x53, 0x72, 0xa0, 0xb4, 0x6a, 0x7d, 0x0e, 0x30, 0x14, 0x16,
	0xd0, 0xc0, 0x72, 0x9a, 0x06, 0x6a, 0xe9, 0x32, 0xff, 0x4b, 0x09, 0x50, 0x66, 0x8d, 0x0f, 0x2f,
	0xf6, 0xfb, 0x30, 0x1b, 0x08, 0x87, 0x54, 0x46, 0x6d, 0x4c, 0x72, 0xda, 0x54, 0xba, 0xe8, 0x21,
	0x68, 0xde, 0xb6, 0x98, 0x48, 0x5f, 0x95, 0x57, 0xab, 0x79, 0x6b, 0x99, 0xdc, 0x66, 0x23, 0xc8,
	0xe4, 0xfa, 0x16, 0xd4, 0xcf, 0x42, 0x3f, 0x0a, 0x2c, 0xec, 0x52, 0xcc, 0x54, 0x46, 0x81, 0x10,
	0x75, 0x62, 0x49, 0xfb, 0x77, 0x53, 0x50, 0xeb, 0xe1, 0x01, 0x09, 0x9f, 0x60, 0x8e, 0xc5, 0x3e,
	0x82, 0x64, 0x1f, 0x01, 0xba, 0x03, 0x0b, 0xea, 0x7d, 0x67, 0x65, 0xbf, 0x27, 0x34, 0x94, 0xf8,
	0x48, 0x7e, 0x56, 0xf8, 0x1e, 0xcc, 0x69, 0x3d, 0xb1, 0xef, 0x72, 0xd1, 0x73, 0xba, 0xae, 0x54,
	0x5e, 0xca, 0xc7, 0xc8, 0xb4, 0x4d, 0xf9, 0x60, 0xcc, 0xc3, 0x3b, 0x9e, 0x42, 0xdb, 0x50, 0x67,
	0xd1, 0x89, 0x43, 0x2f, 0x69, 0xfc, 0x1c, 0x53, 0xbe, 0xa7, 0x45, 0x22, 0x87, 0x68, 0x9f, 0xfc,
	0xd6, 0xf7, 0x88, 0x22, 0xb7, 0x64, 0x2c, 0x9e, 0x32, 0xe7, 0xf1, 0x44, 0x45, 0xc6, 0x50, 0x0c,
	0x86, 0x6f, 0xdf, 0x6a, 0xea, 0xed, 0xdb, 0xfe, 0x7d, 0x09, 0xaa, 0x22, 0x90, 0xc7, 0x84, 0xa0,
	0x47, 0xb0, 0x2e, 0x9b, 0x96, 0x4c, 0x58, 0x74, 0xa5, 0x8a, 0xc3, 0x29, 0x99, 0x93, 0x54, 0xd0,
	0x0f, 0x60, 0x55, 0x4e, 0x6b, 0x3a, 0x3a, 0x4a, 0xf7, 0xd1, 0x25, 0x73, 0xcc, 0x6c, 0xfb, 0xcf,
	0x25, 0xa8, 0x6b, 0x37, 0x7a, 0x2c, 0xf8, 0xee, 0x3c, 0x89, 0x7b, 0x27, 0x05, 0xcb, 0x82, 0xc4,
	0xa4, 0x2c, 0x4c, 0x46, 0x27, 0xda, 0x7f, 0x2b, 0xc1, 0x4a, 0xe2, 0x77, 0x26, 0xfd, 0xbe, 0xbb,
	0x1d, 0xe4, 0x57, 0x96, 0x0e, 0xe5, 0xf6, 0x32, 0x49, 0xa5, 0xfd, 0xaf, 0x65, 0x98, 0x29, 0xae,
	0xee, 0x7d, 0xa8, 0x04, 0xf2, 0xaa, 0x57, 0x7d, 0xc2, 0x4a, 0xbe, 0x4f, 0x10, 0x76, 0xa6, 0xd6,
	0x42, 0x3b, 0xd0, 0x54, 0x3f, 0x2d, 0x3f, 0x9e, 0x19, 0x92, 0xda, 0x7c, 0x90, 0x32, 0xe8, 0x3a,
	0xe8, 0x2e, 0x2c, 0x68, 0x4d, 0x7d, 0xc7, 0x4e, 0x67, 0x14, 0xf5, 0x15, 0xbb, 0x0d, 0x75, 0x87,
	0x30, 0x3b, 0xa4, 0x01, 0x4f, 0x15, 0x47, 0x4a, 0x84, 0x0e, 0x60, 0x45, 0x43, 0x51, 0xcf, 0xf6,
	0xfb, 0xc4, 0xc2, 0xf2, 0x19, 0x30, 0x2b, 0xf6, 0xbe, 0xa4, 0x26, 0xbb, 0x62, 0x4e, 0xbd, 0x04,
	0xba, 0x70, 0x23, 0x67, 0x73, 0xf5, 0xb7, 0x98, 0x95, 0x0c, 0x50, 0x12, 0x80, 0xfb, 0xb0, 0x9a,
	0xec, 0x39, 0xe2, 0xe9, 0xf5, 0xab, 0x62, 0xfd, 0x65, 0xbd, 0x73, 0x39, 0xa9, 0x1c, 0x78, 0x06,
	0x46, 0x2f, 0x67, 0x95, 0x78, 0x50, 0x1b, 0xe7, 0xc1, 0x6a, 0x2f, 0x03, 0x95, 0xb8, 0xf0, 0x16,
	0xd6, 0xb4, 0x0b, 0x2e, 0x66, 0xdc, 0x0a, 0xc9, 0xb7, 0x11, 0x61, 0xea, 0x7a, 0x83, 0x2b, 0xaf,
	0x37, 0xed, 0xff, 0x73, 0xcc, 0xb8, 0xa9, 0x4d, 0x3b, 0x1c, 0x7d, 0x05, 0x3a, 0x18, 0x96, 0x22,
	0xf4, 0xba, 0xb8, 0x85, 0x6e, 0x25, 0x9e, 0x89, 0x68, 0x0e, 0x7b, 0xc6, 0x58, 0x47, 0xde, 0x3f,
	0x8d, 0x20, 0x2d, 0x43, 0xdf, 0x07, 0x08, 0x62, 0xee, 0xb5, 0x1c, 0xcc, 0xb1, 0xfa, 0x02, 0x84,
	0xd2, 0xc4, 0x2e, 0x69, 0xd9, 0xac, 0x05, 0x09, 0x43, 0x3f, 0x1e, 0xde, 0x07, 0xf2, 0x11, 0x20,
	0x5e, 0x5c, 0xf5, 0x83, 0xf5, 0xe2, 0xdb, 0x44, 0x26, 0x62, 0x23, 0xd3, 0xfa, 0xa3, 0x1f, 0x43,
	0x2b, 0x8b, 0x61, 0xe9, 0x9b, 0x37, 0x4e, 0x4c, 0xf9, 0x38, 0xbb, 0x91, 0x31, 0x79, 0xa3, 0xe6,
	0xbb, 0x8e, 0x88, 0x6b, 0xd6, 0xd8, 0x97, 0xb9, 0x2b, 0x5e, 0x6c, 0x35, 0x73, 0x39, 0x18, 0x59,
	0xbf, 0xeb, 0xa0, 0x0e, 0x6c, 0xe6, 0xad, 0xb2, 0x49, 0xd1, 0x14, 0x49, 0xd1, 0xca, 0x1a, 0x67,
	0x52, 0xe3, 0x17, 0xb0, 0x35, 0x06, 0x22, 0xc9, 0x90, 0xc5, 0x71, 0x19, 0xb2, 0x51, 0x84, 0x9b,
	0xe4, 0xc9, 0x97, 0xb0, 0x91, 0x43, 0xce, 0x16, 0x0c, 0x12, 0xbe, 0xad, 0x65, 0x30, 0x32, 0x65,
	0xf3, 0x35, 0xdc, 0x2c, 0x06, 0x48, 0x3c, 0x5b, 0x1a, 0xe7, 0xd9, 0x7a, 0x01, 0x6a, 0xe2, 0xd8,
	0x57, 0x70, 0x6b, 0x32, 0xae, 0x85, 0x0f, 0xc5, 0xdb, 0xad, 0x66, 0x6e, 0x4e, 0xc0, 0xe9, 0x1c,
	0xa2, 0xdf, 0x8c, 0x78, 0x28, 0x89, 0xc8, 0x76, 0x7d, 0xf6, 0xa1, 0x8f, 0xbc, 0xd6, 0x68, 0x64,
	0x8f, 0x84, 0x79, 0x87, 0xa7, 0x3e, 0x8f, 0xae, 0x4e, 0xf8, 0x3c, 0x7a, 0xe3, 0xe3, 0xbb, 0x51,
	0xe3, 0x3a, 0x5f, 0x07, 0xef, 0xc0, 0x02, 0x65, 0xd6, 0x37, 0xcc, 0xf7, 0x74, 0xcd, 0x1b, 0x6b,
	0xa2, 0x4d, 0x6e, 0x50, 0xf6, 0x33, 0xe6, 0x7b, 0xaa, 0x9a, 0xe3, 0xf3, 0x95, 0x21, 0xb6, 0xa8,
	0x67, 0x05, 0x2c, 0xb0, 0x8a, 0xfa, 0xf8, 0x96, 0x88, 0xfe, 0xa6, 0x54, 0xec, 0x7a, 0x3d, 0x16,
	0x74, 0x46, 0xfb, 0x77, 0x13, 0xee, 0x0c, 0x91, 0xf4, 0xdb, 0xa3, 0x10, 0x6e, 0x5d, 0xc0, 0xb5,
	0x35, 0x9c, 0xbe, 0xb8, 0x0a, 0x30, 0xdf, 0xc0, 0x5d, 0x85, 0xe9, 0x47, 0x7c, 0x32, 0xe8, 0x86,
	0x00, 0xfd, 0x44, 0xaa, 0xbf, 0x8a, 0xf8, 0x04, 0xd4, 0x5f, 0xc3, 0xbd, 0xd4, 0x9e, 0x33, 0xad,
	0x65, 0x21, 0xf4, 0xa6, 0x80, 0xbe, 0x9b, 0x6c, 0x3f, 0x7d, 0x57, 0x16, 0xc0, 0x8f, 0xd6, 0x92,
	0x64, 0x38, 0x7d, 0x9b, 0xdd, 0x14, 0xd9, 0x9a, 0xad, 0x25, 0x41, 0x74, 0xfa, 0x62, 0x23, 0xb0,
	0x96, 0x27, 0xa7, 0xf7, 0x9e, 0x26, 0xda, 0x2d, 0x41, 0xb4, 0xbb, 0x79, 0xa2, 0xcd, 0x50, 0xd5,
	0x7b, 0x2f, 0xcd, 0xb8, 0xab, 0x41, 0xe1, 0xe4, 0xe8, 0x07, 0xe0, 0xed, 0xdc, 0x4d, 0x3e, 0xfe,
	0x03, 0x30, 0x7a, 0x03, 0x48, 0xbb, 0x18, 0xa7, 0x17, 0x65, 0x94, 0x13, 0x66, 0xdc, 0x12, 0xbe,
	0x7d, 0x5a, 0xec, 0x9b, 0x99, 0xe8, 0x49, 0xb7, 0x16, 0x83, 0xbc, 0x1c, 0x3d, 0x80, 0xf9, 0x38,
	0x05, 0x4f, 0x49, 0xc2, 0x3b, 0x6d, 0xe1, 0xd2, 0x72, 0x16, 0x51, 0xf6, 0x86, 0xe6, 0x5c, 0xc0,
	0x82, 0x63, 0xa2, 0x09, 0xe8, 0x4b, 0x40, 0xfa, 0x4a, 0x4a, 0xd9, 0x7f, 0x92, 0x23, 0x1d, 0x6d,
	0x6f, 0xea, 0x6e, 0x64, 0x08, 0xf0, 0x08, 0x96, 0xb8, 0xaf, 0x42, 0x95, 0x42, 0xb8, 0x3d, 0x16,
	0x81, 0xfb, 0x22, 0x6a, 0x43, 0x84, 0x4d, 0x80, 0x4b, 0xcc, 0xb5, 0xe1, 0xa7, 0x22, 0x6b, 0x6a,
	0x97, 0x58, 0x7f, 0x63, 0xfc, 0xe5, 0x30, 0xac, 0x2a, 0xd9, 0x52, 0xcb, 0xdc, 0xc9, 0x7d, 0x6d,
	0x29, 0x6c, 0x26, 0x93, 0x50, 0xca, 0x61, 0xb2, 0x72, 0xeb, 0x11, 0xa0, 0xd1, 0xab, 0xf6, 0x3a,
	0xaf, 0xba, 0x56, 0x17, 0xd6, 0x27, 0xe4, 0xd0, 0xb5, 0xa0, 0x9e, 0xc0, 0x6a, 0x71, 0xc8, 0xaf,
	0x83, 0xb2, 0xeb, 0x40, 0x33, 0xff, 0xaf, 0x32, 0x54, 0x81, 0xb2, 0x83, 0x07, 0xcd, 0xff, 0x43,
	0x55, 0x98, 0x7e, 0x47, 0xc8, 0x45, 0xb3, 0x84, 0xe6, 0xa0, 0xca, 0xdf, 0xf9, 0x96, 0x18, 0x4d,
	0xa1, 0x1a, 0xcc, 0xf4, 0x7d, 0x8f, 0x9f, 0x37, 0xcb, 0xa8, 0x0e, 0x95, 0x6f, 0x23, 0x1c, 0x72,
	0x12, 0x36, 0xa7, 0x51, 0x03, 0x6a, 0xe7, 0xd8, 0x3d, 0xb5, 0x06, 0x04, 0x87, 0xcd, 0x99, 0xd8,
	0x5c, 0xfc, 0x9a, 0x7d, 0xfc, 0x93, 0x5f, 0x3d, 0x38, 0xa3, 0xfc, 0x3c, 0x3a, 0xd9, 0xb3, 0xfd,
	0xfe, 0xbe, 0xfe, 0xc0, 0xf2, 0xea, 0xe5, 0xd3, 0xfd, 0x00, 0x0f, 0x7c, 0x8f, 0x7c, 0x16, 0x92,
	0xc0, 0x67, 0x94, 0xfb, 0xe1, 0x60, 0x3f, 0xb8, 0x38, 0x93, 0xff, 0xbd, 0xd6, 0xff, 0xe2, 0x3e,
	0x99, 0x15, 0xc3, 0xc3, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0x3c, 0xbb, 0x5b, 0xa9, 0xfc, 0x1e,
	0x00, 0x00,
}
